/* ----------------------------------------------------------------------------------------------------------------------
//DESCRIPTION:Makes all overset text easily visible

+    This script is part of project-octopus.net

+   Author: Gerald Singelmann, gs@cuppascript.com
+   Supported by: Satzkiste GmbH, post@satzkiste.de

+    Modified: 2023-04-26
 
+    License (MIT)
		Copyright 2023 Gerald Singelmann/Satzkiste GmbH
		Permission is hereby granted, free of charge, to any person obtaining 
		a copy of this software and associated documentation files (the "Software"), 
		to deal in the Software without restriction, including without limitation 
		the rights to use, copy, modify, merge, publish, distribute, sublicense, 
		and/or sell copies of the Software, and to permit persons to whom the 
		Software is furnished to do so, subject to the following conditions:
		The above copyright notice and this permission notice shall be included 
		in all copies or substantial portions of the Software.
		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
		OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
		THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
		FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
		DEALINGS IN THE SOFTWARE.
// ---------------------------------------------------------------------------------------------------------------------- */
#targetengine octopus_overflow
#include "./includes.jsxinc"
init();
log_run();

var script_version = get_script_version();

var dev = (Folder.userData.fsName.split("\\")[2] == "Gerald Singelmann" ||Folder.userData.fsName.split("/")[2] == "me");
cellBox = null;	// wird in init gesetzt, will ich global haben

if (! dev ) {
	app.doScript(main, undefined, undefined, UndoModes.ENTIRE_SCRIPT)
} else {
	main();
}

function main() {
	if (app.documents.length == 0) return;
	var doc = app.activeDocument;

	var sk_special_edition = true;
	var slots_per_clm = 5;
	var slot_gap = 2;

	var script_version = '7';

	var colors = [
		{
			name: "Blue",
			value: [100, 0, 0, 0]
		},
		{
			name: "Orange",
			value: [0, 50, 100, 0]
		},
		{
			name: "Green",
			value: [50, 0, 100, 0]
		},
	];


	init();
	get_prefs();



	function get_prefs() {
		var do_update = doc.layers.item(__('OF-Frames')).isValid;

		var _state = doc.extractLabel("gs_show_overflow_prefs");
		if (!_state) {
			_state = app.extractLabel("gs_show_overflow_prefs");
			if (_state) {
				_state = JSON.parse(_state);
			} else {
				_state = {
					mark_frames: true,
					show_count: true,
					show_thread: true,
					inspect_tables: true,
					mirror_layout: true,
					color: 0,
					pos: 0
				}
			}
		} else {
			_state = JSON.parse(_state);
		}
		// $.bp( _state.hasOwnProperty('colors'));

		var spath = get_script_path(true);

		var w = new Window('dialog' );
		if ( "I want to be able to collapse this ") {
			w.orientation = 'column';
			w.alignChildren = ['fill', 'fill'];
			w.fish = w.add( 'group {orientation: "row", alignChildren: ["fill", "bottom"]}');
			w.main = w.add( 'group {orientation: "column", alignChildren: ["fill","fill"]}');
			w.btns = w.add('group {orientation: "row", alignChildren: ["right", "fill"]}');
			w.footer = w.add('group {orientation: "row", alignChildren: ["right", "fill"]}');
			w.footer.add('statictext', undefined, 'v' + script_version)

			
			var _fl = w.fish.add("group {alignChildren: ['left', 'bottom']}");
			var _fr = w.fish.add("group {alignChildren: ['right', 'bottom']}");
			_fl.add("image", undefined, unescape("%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%01%D7%00%00%00C%08%06%00%00%00%CE%04O%20%00%00%00%09pHYs%00%00%0B%12%00%00%0B%12%01%D2%DD%7E%FC%00%00%20%00IDATx%9C%ED%7D%09xTU%9A%F6%7BS%95%0A%21%01%02%A2%E0%82%04%B0%05%15%08%A8-%20j%A2-%EA%A8%0CqlW%FC%1BJg%14%1D%BBA%DB%19%AB7Q%7B%8B%DD%D3j%DB%B6%A8%E3t%91npwL%DA%5DP%13%5C%C0V%21a%13%94@%D8%97%00%06%08d%AB%CA%FD%9F%F7%D4w%8B%5B7%B7*%95%A4%02%8C%9C%F7y%8A%22U%B7%EEr%CE%B7%9Co%3D%86i%9A%D0%D0%D0%D0%D0%D0%D0H%1D%D2%F4Xjhhhhh%A4%16Z%B9jhhhhh%A4%18Z%B9jhhhhh%A4%18%DE%23%7D@%8D%60%60%20%80%AB%F8%7F%D3_%F4%E8%E1%BF%23%0D%0D%0D%0D%0D%8D%C48%A2%12%9A%8C%60%E0%3A%00%D7%03%18%0B%A0%AF%A5%FC%07%03h%02%B0%E9%E0%A1%F5%00%B6%00%28%03%F0K%D3_%B4%FE0%DE%B6%86%86%86%86%86F%0C%0E%BBr%15%85%1A%000%FC%18%C0%7B%02%800L%EC%81%81%CD%00F%98@%3F%03%C8%02%B0Vnu%27%80%DE%86%890%0C%AC%8E%7CT%05%E0%7BZ%C9jhhhh%1C%098%2C%CAU%5C%BDt%F1%5E%D9%17%F0%1E/fh%03%80qT%A88%16%23%F3%C7%A2_%EEIq%CF%B1%B6b%25%96V.%C2%BBf%03%BA%19%06V%01%7C%90%1BL%7F%D1%0B%87%F4a444444%1C8%E4%CA%D5%08%06%E8%CA%BD%E0%0C%C0%A0o7%CB%04%96%19%C0%AD%C8@%E1%94%9B%3Bt%CE%87%8Bga%23@+%96%0F3H%5B%B0%1A%1A%1A%1A%1A%87%13%87%2C%5B%D8%08%06f%18%C1@%F3P%20%7F%00%60%8C%02%F0%8B%FC%89%EA%BB_%E4%0C%E9%B0b%25%EE%9Er%3B%06%28%8B%17%06%80E%29%BCm%0D%0D%0D%0D%0D%8Dv%A3%CB-Wq%01/%EA%0B%F4g%DC%F4%3B%00n%9B4%19Y9%3D%95kw%5Ee9n%9Br%7BJ%AEuy%F1%2C%95%05%B5%13%B8%5E%BB%8754444%0E%17%BA%B4%14G%92%95%E6%8C%00%BC%FBL%13%D3%06%9D%A9b%A9%16%16V%96%E3%A6I%93%3B%7D%9Dy%C5/c-jTVqVD%B92AJ+W%0D%0D%0D%0D%8D%C3%82.S%AEF0%F0Lw%E0f%BA%80%A9%F4n*%BC%09%DB%AB7%B5%3A%8E%16lg1a%CA%F7%D5%19x%FE_%96%BF%C6%FF%E6jr%D2%D0%D0%D0%D08%5C%E8%92%98+%E3%AB%DD%81%5BN4M%E3%DA%9C%21%18%993%04O%95%CE%C5%C3%95%E51%C7%15v%D2j%A52%7D%AAxV%F4of%17%D7E%BC%DC9%9D%3A%B1%86%86%86%86%86F%27%90r%E5*1%D6%DF%D3t%9C%3E%AA%00u%B5%7B%B1%BDv%13%FAE%12%8E%B0%B0%F4%5D%3CX%FC%04%96%96/%EA%94%D5JW%F0%DC%F2%D7Z%B9%95%07%1B%A6%8A%BB%8AKZCCCCC%E3%90%A3+%DC%C2%C5g%00%DE%F1%C8%C0%E0Q%A7%A3n%CF%5E%2C%AC%5E%82%C2%FC%89%CA%B2%B4%2C%CD%FD%B5%7B%3B%7C%01*h%9EkB%FE%F7%5B%7D7%04%06vD%E2%AE%C7w%EA%29444444%3A%88%AEP%AE%E3%3Dt%F9N%B9Y%29%D0e%D5K%94%5B%D8j%08%D1%D9%CC%60f%18%AF%AD%AD%C2%E4I%A9%C90%D6%D0%D0%D0%D0%D0H5R%AA%5C%8D%60%E0%3Cv%5C%3AN%FE.%29%9D%8By%26pw%0A%92%96%D4%F9%8A%FF%82%B5hT%A5%3C%1A%1A%1A%1A%1A%1AG*Rm%B9%9EM5%3A.g%88%FAc%F2%94%DB%D1%195H%CB%97%0A%9AXj%02%23%8DH%C3%08%0D%0D%0D%0D%0D%8D%23%19%A9Nh*%CCr%94%D70q%89%AF%8E%80%E7%A1%82%1E%91%3B%1AY%86%89%EDI%9C%A3%0A%A6%DAA%07%C0VMy%1A%1A%1A%1A%1A%87%03%5DR%8A%D3o%E0I%98%5B%3CK%BDh%7D%DA%1BGt%04%FC%FD%7DS%EE%C0%60dD%CF%19%0F%FBMCmM%A7%3B4ihhhh%1C.tI%13%89%A7%CA%FF%8E%C2%DC3%3B%ADT%9DH%A6%FF%F0nC%BD%D5%A7%F4%C2%1A%1A%1A%1A%1A%1A%ED@%97X%AE%2C%87I%B5bM%06%CC%24%EE%139n%CB%21%BF%B8%86%86%86%86%86%86%E0%90%ED%8As%28%C0%5E%C5%12o-%D3%13%AC%A1%A1%A1%A1q%B8%90j%E5%BA%B0%A9%03%3F%A2%C5%E9%8C%A3%B2%B5%21%3Fo%0F%DE5%D5%9E%AE%C4/S%F0%2C%1A%1A%1A%1A%1A%1A%1DB%AAc%AEo%EC%02%02%89%B2z%B9%B1%B9%BD%9C%86%0At%FB%FAM*3xN%E9%5CvVB%05%E3%ABle%983DuyJ%06l%87%D8%DF%00j%80*%BDY%BA%86%86%86%86%C6%E1DJ%95%AB%E9/%FA%C8%08%06B%BBMx%D9%A2%90%9D%94%DE3M%5Cc%18X%08%60%93ib%B8a%C4%FCF%B5D%AC%28Gcy%15f%F6%3E%1B%97_%7E%05%9E%98%FBgxr%07%B8%C6m-%0B%F7%93%D2w%A3%BB%E1%F0%B3W%CD%1D%D8%119%F7TMQ%1A%1A%1A%1A%1A%87%13%5D%11s%5D%DFl%00%83%F3NW%F5%A9%BF%EF%7D6%1E%F3%17%E1%DF%CF%BB%06%5Bo%7E%08%A7%20%23%E6%60Z%AC%17%1B%7D%F1%D1U%FF%89%EEg%9E%86%D9_%7F%81%9F%FA%EFQm%13%9D%60%BD%2C%95*%B1%035QEK%8B%B7%87a%E0@%C4j%FDHS%94%86%86%86%86%C6%E1DW%28%D7%97%18w%5DX%1EQ%82%FD%7B%F7U%EF%B3%D7%7C%81%DA%A6zT%A3%B1%D5%0F%B2%7B%F6%C4%9E%DA%DA%E8%DF%AB%AA%AB%94K%D8%09n%00@kv%5E%E9%CB%EA%7B*Z*%DCe%00_%DCl%EE%7B%9A%9A44444%0E7R%AE%5CM%7F%D1OV%03%E6%02%B3A5%93xr%DD%3B%EA%F3G%C7%5C%A9%DC%BDW%E6%E5%B7%FA%CD%E0%D1g%E0%C7%1F%3C%8D%E1-%99%18%DE%E0%C5%0D%EF%FF%B7%B2%7C%9D%C8%167%F2B%B3%11%E3%26%5D%82%F9f%0D%FE%B0n%09%B6E%8E%BB%5B%C7Z54444%8E%04tI%13%09%E6%29%A5%1B%C6%10%BAm/%CC%CB%C7m%C1%00%F6%9B%C0%E0%DEC0%DA%25A%89%0A%F3%FF%E5L%C6%FD%A5O%AB%BF%A7%17L%8C%EE%A2%E3%04-%D5%FDF%24%11%AA%CA0%D1%07%06%93%98*L%7F%D1%A3%9A%A244444%8E%04t%95r%FD%D97%C0%F3%AC%3Beo%E0d2%7E%AD%3E%C2%89%C0%E6%FD%85%B4h%AB%97%E0%DE%CAr%F4%87%81%B5%918%EBhMM%1A%DFF%18%C1@%0E%80Qq%1E%AD%DA%F4%17U%EB%89%D7%E8J%18%C1@%01%80%02%C7%25Hw4j*%8C%60%20%17@n%9C%5B%E01%B5q%BE%FBV%A3%AB%94%EB%E6%86N%FC%98%16oUel%8D%AB%AA%7B5%80%7BK%E7b%0F%80%DE4%8F%23%8A%F5%94N%DFm%27%60%04%03%14%7C9r%06-%EC4%DA%84%83f%DA%12%3E%3C%F6%838%DF%3D%00%E0%7E%3D%E2%1D%87s%F1b%FA%8Bt%03%1A%81%11%0C%B0%F2%E2A%00%03%12%1C%B3G%9A%F6L%8As%C8%85GkS%9F%84%CA%95%FB%B3%02%F8%15%80%A1%00%BA%C9j%E5m%C6U%DB8%EF%D4c%A4N%D5%02Ks%18%27M%06%B4b%A9%60%97%D6Va%1EL%D5N%91%18%0C%A8%0EL%BB%22%C9K%A5%A6%BF%E8%AA%D4%0CC%F20%82%81B%29%C3%BD%18%C0%89.c%C6%B7%AF%00%BC%C5P%B3V%B6%1A%B2%B2%9F%01%E0J%D5%1D%D4%01%A1%99%F5%C2_%14Dev%21%EF%F3xpA%EE%29%E8%97%DD%23%FA%C3%B9%95%9F%1F%F5%E3%DA%11%882%A5%D2%B8%1E%C0%18%E7%29d.%EA%00%BC%C7-%A4M%7F%D1%EC%FF%0B%CF%95j%18%C1%C0%2C%00%D3%D2%3D%1E%0C%CC%E9%833%8E%3B%1E%D9%3E%9F%BA%CA%E7%9B7%60%F5%CE%1D%C8LOG%7Dss/.%14%B3%7D%19%18%D4%FB%18%8C%EC%7FB%F4N%8Ev%1A%8D%AB%5C%8D%60%E0%99%EE%C0-%94%04%FBE%B1m%819%AA%01%C6%28%23%18%98%0E%C0%9F%60%E7%99%AB%F9%8F%5D%99%B2%E6u%9C%FC%9FVh%BC%98*%95*%95+%7F%CB%E3%B7%14%CF%C2%0A%80e6%5C%DDWRO%03x%F2P%27/%89k%84%8C6P%88%0A%A7%1Csl%0C%D1%11K%B7mA%D5%EE%9D%A76%B7%84Om%0E%87%A7%1B%C1%C0+%00%EE%D1J%F6%E8%84%11%0Cp%21%3A%D3%9B%96%96%91%99%EE%C3%98%93%06%C6%28I%D2%CB%E6%BD%B5%D8%5D%7F%80t5%B0%BE%B9%99%19%7F3%F9S%FB%80%5D%7C%CA0-%B8%3A%01Q%AA%5C%E0%CCL%82%7F%B3%9B%5B%C2%93%9A%C3%E1IF0%F0%18%80%FB%8E%A6%9C%0E%CA%BA%CC%F4%F4i%C3%FA%F6%C3%8F%CE-%88%A1Wb%F2%A8%EFb%7FS%23%1E%FD%A4%0C%1F%AF_%1B%FD%9C%F4%C9%EF%2C%1C%ED4%EA%AA%5Ci%B1v%07n%A6%BF%F5%D6%BC%FCh%CC%D4%DA%BC%3C%07%C8%5C%05%3CG%F7%96%D3%8A5%82%81%EB%FA%029v%3F%82s%3FW%96%E9%14%E6%DE%1C%FD%CE%DE%2C%82%E55%D9%A2%5C%89%ABsGc%7F%F5b%AC%84A%97%8D%D3%EF%7FH%60%04%03d%AC%E9%B4%20N%CE%E9%83%89%C3%86c%C2%29%C3%5C/mm%0E%BFv%F7N%94%AC%5C%8A%F9U%AB%B9%D0%B8%D2%08%06%AE7%FDE%25%87%F8%BE%29Pr%B4b%3F%3C%E0%EA%3F%C3%EB%9D%96%9B%D3%07%FE%B3%C6%C5%28G%0B%16%BDPXQ%B0%FF%F2%83%B7%8F%8A%B19%94%107%FC%DB%3E%8F%A7_%07%F8%97%9A%E5%11%CBcu%94%C4%0F%9F%3C%B9Wo%FC%FA%92%89%D1%0FH%9F%F3%D6%ACV%EFY%BE%0C%8C%3By%10%FAv%CF%3A%AC7y%A4%23%9E%E5%FA%A7%21%80qW%7El%D6%AE%95t%C4L%DD%3FV%94%19%9B%0D%23%60%04%03%C7%9A%FE%A2%7FE%84%88%07%B2%A7%03%5D%C2%85%B6%92%9B%B5%D5+UC%89%E8%DF%B6Z%D7eR%BBja%93j%0EQ%13%B5r%F9%DD%09%D5K%B0%17%C81%82%81W%0F%B5+%D8%08%06h%ADN%A1b%9Dz%E6X%14%9E%3E2%FA%9D%25%10%C9%88%C4q%D9%3D0%B2%FF%89j%A57%B8O_%DC%7D%DEE%EA%F8%DF%96%BF%9B%B1%F3%C0%FEW%8D%60%E0%DFM%7F%D1%13%5Dp%8F%B9%E2%EA%CA%95%F8Q%7F%26a%CB%D7%7F%94%15%BB%C6%21%04W%FFT%ACc%07%0C%C2%BD%17%5C%1C%BD%F0%F6%BA%7DX%B8a%9D%A2%1D%8Bf%FAe%F7T%8A%97%02K%23%E5%BCA%7E%F8%C4%E7%F1dv%82%7F%B1%F3%C0%FE%FC%C6P%E8C%23%188%FF%DB%AC%60%B9%20%CF%F2%F9%86%5E%3B%E2%CC%98%CF%7F%F4%FA%CB%D8QW%87%B0%D9%C2%F6%ED%BD%82%8B%17%F5K3%1C%ED%F64b%10O%B9%E6%A5%9B%88Q%ACT%A8u%7B%22%1B%9F%D3%92%A5_%F8o%95eX%06%E3%16%23%18%A0%91%FBs%F6%CE%1F%01x%C7%21%23%C6%DA%9D%8BF%FC%22%C9q%FF%86%02%C8%E1%3A%BEm%D2d%FC%B4d%0E%60%18t%D3%9C%E7%D6%85I%14%FB%22Q%2C%90%3D%5D%DF%E9%8C26%82%81%FB%23%8A%D5%8B%87/%BFJ1%9C%05%AEjg/%FE%14%24%AF%C6P%28%FA9c%14%E7%9E%3C%18w%8E%3D_%AD%F0%F8%9BG%AF%B8%1Aw%BF%F9*%B6%D5%ED%7D%D4%08%06%3Ea%86%5DG%EF%29%0Er%C5%95%88%9Cn%99J8%F4%CE%CC%C2%AA%9D%DBP%5B_%9F%D3%91%13jt%1AO%F6%C9%EC%1E%A3X%29%C8%03%EF%94%C2%9B%96%86PKK%F4%F3%1E%19%DD%B0%AF%B1%01%C7%F7%E8%A9G%3D%85%10%CF%CD%7C%9F%C7%9B%99%0A%FE%DD%BAo%EF%F0PKx%B6%E4%5C%7C%5B1j%7FSS%CCBo%DE%9AU%A8m%A8%A7b%AD4%FDE%D1%E4/%23%18%B8%0F@r%894G%21Z5%91%A0%F2%EA%0B%18g%1B%916%85T%8E%BF%28%9E%85%A2%CAr%CC%AD%5E%82%C7%8Bg%A9%CF%A8%3C%EF%99t%13%CE%00%F8%A2%99%FA%E1%08%20s%B0cS%F3%DF%95%CEU%7B%ACZ%D6%A9%D3E%ECl%F2%CF%BF%AB%00%14%97%BF%16%FD%8C%16%F3-%83%CE%C4%88H%1C%EA5%C7O%2C%C5%BA%26%0F%E8%7F%A3%B8v%CE%032%87%02%85F0p@%BEo%17d%C5%3B%93%CC%F6%E0%C5W%C40%E6%C3%1F%BD%8F%D9%8B%17%A1%29%1C%DA%DE%18%0A%DD%25%19q%7C%FD%B19%1C%DE%FB%F1%FA*%CCx%E3%95%A8uB%26%25s%F7%F0e%A4ss%83%AE%22%B3I%A7%8D%C0%B3%D7M%C5%23W%5C%8D%FB.%BA%0C%BD%BBu%EF%AAKi%24%00%85zfz%FA%D0%EBG%9E%15s%D0%1F%3EzO%BD%87ZZ%CA%01Xt%E3%DF%D7%D8P%0C%60%E3%D6%7D%7B%F5%B0%A6%16%CF%A4%7B%3C%C7%24%E0_*V%8E%FDU%D6%5C4%87%C3%1F%C7%E3%DF%9E%19J%26N%92%2C%DA%A3%06%3B%EA%F6%A9%185%D7%24%F6g6%FDE%0F%9A%FE%A2%F3%F4%16%9F%EEp%B3%5C%CF%E6%FAypn%C4%F2d%0C%94%99C%3B%81%92M%C0%A5U@%E6%D7%25s0%7DT%81R%B0%0FL%B9%5D%EDH3%0A5%18g%8B%CF%12O%15%CFB%83J%A95%A3%9F%CD%AF%5E%12%F5W%3Aa%F5%0A%3E%00%985%80a%CF0%A6r%A6%0By%7F%C4%3D%5C%E6%88%BF%96%0C%06%BC7%E4%8EV%5D%A1%18%D3%FD%E9%94%9B%D5%7D%F9P%93%B9%0CXg%04%03%83%DA%99%04u%3F%13%1F.%1C%7CjL%AC%8C.%BD%B2u_S@%BEb%FA%8B%BE%EF%F8M%19%E3%B3%A1%96%96%92%EDu%FB%F2%7ES%F6n4nA%06%FD%CF%0B%26%E0%E7%F3%5E%3B%C1%08%06%EE%88%E7%1E%16%17/W%C67%01%E0%60f%DA%BE%3E%10%E9%F4%A8%2C%F4%0A%D5b%19%B8/A%8D%19q%B5%24cY%28tZ%CE%B2%90%98%1A%27%9BUe%88%03x%21%5E%99%82%08%9B%19%B6%F2%92%98q%94s%FC%87%D4%CAY%1A%BFA%16%1A%8F%BB%9D%97s%2C%5E%88n%8E%AF%1AL%7F%D10%97c%DD%C6%E0+%D3_%D4jem%CB%DE%A5%608%CB%F1%B55%C6%ABd%8CK%3A%10%B3%1EEaD%17%A3%05%BA%1Ew%1F%E0%A9U%25%993v7%1B%07%E7aF%7B%2C%23%5B%A2%CEM%8E%B9%9B%07%E07%C9%94%96%C8%FC%FD%AB%D0%5Bo%DBW%BCa6%F9%7E%D99%0Er%AF%B3%5D%E6%9Cf%E0%AF%9CY%B6r%0Dg%D9%10i%20%E0%CCE0%82%01%96%7F%FC%C0q%EC%26%11%E4I%81s%9C%99%9E%7Eu%02%FE%DD%07%E0%9F%5D%C6g6%EFu%7B%DD%BE%60%1C%FE%E5o%1F%B4%85b%9C%E0%F3%CF1%FDEqK%A4%8C%60%E0q%E15%3B8%B63%2C%DE%94%F3%DF%20%B6%C2%19%8Ec%3F%05%F0%3C%EF%D5%CDE-9%22%97%B9%F0%0E%84%B6%2C%7E%B7%B7%CB%5B%21M%F0%BA%9D%D83%AE%B3k%86ma%C1%B9%DB%D6%99%3C%18%5B%E5%C5y.r%87%F7%F3%21%80%87%9C%FCg%04%03%15q%E8%EEqg%E2%99-%11%D5%8E%06I%8Au%1E%7B%0F%80%3B%1D%C7n%22ou%24o%A5%CD%3A%D7%15%A8A%24%22%81%C2%BE%C2m%9B%0D%831W%DC%22nbkw%1A%3B%B8%B5%DCV%AEn%60%A207%E2%BF%A7%AB%97%9Cz%87%94%E8P%99n%3F%A8w%ED%B5%AD%0BV%00%E3%CD%DA*%EFH%C9%1E%26%18%EF%5D2%7B%16%BA%1B%C87%82%81%19%B6%C1%C9%EB-%E7%9F%1BQ%C0%A8%2C%7E%02%D3%F2%FF%19%28_%84%16%D4%18+%80b%97BhW%08aO%A2%80%F4%9F%19%9B%AD%FF%A7E%E5d%AE%8D.%8AU%81%93@%02%0C%B5%B4%2CY%B6%7D%8Br%05Z%CC%CD%F7%21%7D%FA2%8D%FDg%00b%94%AB%08I%7Ev%03%95%BA%01C%09%E7%21%7D%8E%89%1E%B3d%EB%A6%EE_%EF%AA%19%93f%18c%C4%95%C5g%1AsL%F7%2C%5C%F6%9D%D30%A2%7Fle%10%E3E%3B%EA%F6e%0B%D3X%D9%7B9%B6k%F29%E7%00%18O%0B%BD%9B7%3D%26%9B%B5%AE%A9%09+vl%CD%5D%B3%ABf%9A%CF%E3%99f%04%03%95%A2%18%9C%84%96%9B%ED%CB%C8%1B%3B%20%D7%AD%5C%84s%D4%8B%AEP%7EW0%E8%3B%91%B9%DE%BD%AB%DB%17%5B6%5CmD%94%7F%D0%F4%17%DD%EC8g%3E%DD%AAg%9E0%20zN%C6+%17o%D9%E86%ECJHL%CE%3B%3B%FA%01%8F%5DP%5D%D5%DBy%A0%95%9C%96%E1%F5%C2c%A4%C5%1DcoZ%DA%98%FA%E6%E6%292%5E%1D%AA%25%B5%8F%05-%27%15%A12%D1K%16%02%ADB%03%22X%DBc%15%91%9E%EF%F1y%3CY%CCD%E6%D82%F35%F2%ECk%26%B4%98%E6%04%23%18%A0%10q%ED%CEb%04%03%14%DC%7FN%F7xz%C5%99%FB%EEkv%D5%8C%F7y%3C%E3%9B%C2a%26%F5%3C%60%29%0Di%1E%90%C7q%FC%FE%19%07%7B%5C%C8%9C_%E3%22%D0%EE%F4y%BC%03%AF%19%1E9%96%F7%F8%E1%FA*Z%8ES%9D%16%11E%C4%89%3D%7B%1D%C3%E7%E1q%E5%D5k%D0%1C%0E%B77%CEy_%02%FE%E5%7F%7F%10o%E1%C1%85%81%11%0C%8CY%B6%7D%CB%B48%FC%CB%7C%CD%3E%CC%EE%CE%EB%7FR%0C%FD%BC%B4%BC%82%16%F1L%D2Y%BC%D8lfz%FA%BF%8D%3Fy%B0%8Fc%CD%F3%7F%B5k%07%C7%21%C7%A6X%1FM%F7x%EEh%0E%87%D3%9D%19%CDK%B6n%C2%CA%1D%DB%C6%F8%3C%9E1M%E10%95%BC%DB%02a%94%CF%E3%19%1A%A7%7C%AB%CC%E2%C7%3E%DD%B30n%C0%20%7C%B4%BE%0A%BB%0E%EC%1F2%A2%DF%09%DD%F8%8C%C79%B2%83%29W%24%D1%8B%B4%DB%CB%E2%C3%DD%F5%07%86%B6c%3E%A2%90%85%D9%DF%00%0CO%20w%CEX%B3%AB%E6%0C%91%3B%EC%A1%7B%BDm%3CO%C8%F0z%8Fu%A1%BB%BBE%DE%D8qw%02%BAs%1E%7B%E3%89%3D%7B%0Dt%D0%1D%3A%9A%10%DA%A6r%25%19%F6%95e%05%03%AB_%9A%C0%06%03%F8%DA0%94%22c3%FD%096%8B%95%0A%8E.%DD%AD%F2%FB%DE6%97%F0%FC%F2%D7%D0%0Ff%B4o%B0%B3Q%04%A4%ECG%98%ADd%07%F0%C8%9FK%E7%E2%3Fm%9D%9B%FE%A3%60%22%7E_%FE%1AV%02%0F3%C1%89.%9D%93%00c%98%AA%D1%D9%814%D3P%D2%B0%CE0%D4%F5%A8%90%CBg%CF%A2C%F9%82v%8C%8B%B2%1C%F2%07%7DG%ADX-p%D5%7B%A0Im%07%EF%5CU%C7@%04%CF%1FC--%D3%DF%FAje%CC%CA%99%89%02%FF%F5%D1%7B%B4%5Es%ADI%13%25%F7%8E%CF%E39%95%B5bq3K%25%CD%9D%F7a%CF*e%D6%9E%3D%05%DE%823%23%D2%9E%1A/%04%FE%A1%CF%E3%C9%26%F3%DEr%F6%B8%18%D7%99%1Dt%8F1F%F5%D2%F2%8A%BC%A6ph%95%11%0C%8Cu%8B%1B%C7%29%17%E9%95%93%99%89%C0%05%97%B4z%26%9EwN%C5%E7x%7D%D5r%BF%11%0Cd%98%FE%A2%C9%89%CEIA%14G%B9%C6%8C%8Fu%EC%82%EA%AA%98%EF%99%9C%E6M%F3L%C9%CE%F0%E1%87c%F3%5D%13%88%ACs%D0%D2%BC%F3%B5%97%E2%5E%AB%0D%D4f%F9%7C1%0B+%E2%AA%D3%F3P%FA%E5R4%85%C3%DC%9A%F1%E7%29%28%EFP%8B%0Ag%A2%0Eq%DB9%E3U%9Cp%C7%FE%7DJ8%B9X%87%F7%F9%3C%9E%07%DA1%F7%96%D2%20o%14%88%A0+m%0C%85%26%F1%DA%16%9F%7C%BAi%3D%D6%EC%AA%B9%DCq-%B2%E4Y%1Co%FB%1C-%A8%5E%C3%B7%8B%1C%C7%8E%CA%F0z%8F%B9b%E8p%F5L%BCv%D9%3Au%5C%7B%EBM%0B%13%F0oy%12%99%FB%3F%09%B5%B4%F8%DF%FAje%86%0B%FF%D2Mzr%7DssCc%A8%B9%9B%FD%996%ED%DD%83O6%AC%A5Pv%13%DE%7C%BE%5BY%BA%CC%F9%E1%BD%95%BD%FA%AC%15%F3%B5%BC%17%7F%F7%A6%A5M%CC%CF%3DE%8DU%BC2%18%F2%CD%1B%AB%97%F7%08%B5%B4%7C%60%04%03%A3%93%E5G%9F%C7%D3%EB%D8%ACl%FCp%5CA%F4%BBU5%DB%A8%5C%5B%95%D2X%E0%E7%F6%F3%B4%C5%87%89%20%96o%90%09%A2%ED%A0%BDKE%EE%0C%13%BA%7B%B61%14%9A%EEBw%03%ECrUp%5E%1C%BA%CB%23%5DZ%0A%9B%FF%CF%F0zG%BB%D0%5D%87%5D%DEm6%EE%E7%B4%F7TEw%A6R%AC7%8F%CA%87%88ls%19P%FB1%DD%BF%95%E5%F8%C9%ECY%B8%A7x%16%1E.%7F%0D%FF%10%AD%ED1%81%1FO%BA%292P%B5%7B%F1%25%800%8Ch%A2%12%DD%BC%E9%F6%C1%AC%3D%18s%A2%E0%D9%09TPI%97%14%FF%25%FA9%7F%FB%83%DC%D1V%FC%95%A7%84%CFv%8E%5D%060%C4%88%28u%EBl%A7%19j%81%60HS%8Cd%C0%3A/%9CyBl-%EE%17%5B6R0%EEI%B2%8B%8Bb%96%85%1B%D6%C6%7C%C8%89%96%F8%85%12@%22x%DE%F1%A6%A5%9DJ%21%C9x%A9E%C8%91%F4%F7U%98%5B%F1%99z%F1%FF%5CQ9%95%C2%CE%03%FB%D5%F7%24z%3B%EC%BF%E5%CB%82%5C%F3CoZZ%F6%BF%8F%BD@%B9%BE%2C%02%E7%F9%AD%E3%29%8C%20.1%12%27%E3N%DD%BC%E9%A4%E6E%B2%20h%13%B4l%1E%B9%FCj%D7%C5%02%CFK%21s%E5%B0%E1%3C%EEF%87%FB%3A%A5%10%A6V%8A%F5%BF%0Bo%88%8E%A1%DB%18S%B1%C6c%F8d@A%D7%14%0E7sae%87%FF%AC%B1J%11%FA%3C%DE%2C%29%EF%D8%D0%D9g.%BAtR+%C5%0A%5B%9C%D0%8Cx%86%9E%B4%7FG%C5%EAMK%7B%A0%03s%CF%8F%F2l%96f%19%F9%C4Nw%17%0D%3E%15%DE4%0F%9C%A1%087%7E%1Az%AC%0A%10%F5%90%85%9E%85%82%16%D3%8C%CE%CF%C2%8D%EB%10j%09%A3%3DBN%5C%C2%BD%E3%F0/%92Q%D4%22t%DFM%C0%BF%8C%D1%3EGK%D2%8A%CD%12%B4%90%D2%12%EF+%FD%AF%E3%07%0EV%E3%CA%F1%DE%B1%BF%CE%FA%9C%C9%8EO%A6%7B%3C%13%7F8._e*S%B1Z%0A%C6%A2M%D8%F8%E6%BA%11g*%FEr%B1%FC%E3%82%99%E9%8F%5E%E1%CE%8F%9CG%FBu%9C%9F%5B%AF%F9%8E%EF%93%85%CCs%90Vs%07h%8F%C4%B2JdW%5C%BA%B3%7B%27y%3D7%3A%10%BA%83%23%FC%12%8F%EE%3A%5C%3E%E9f%B9%7E%BEW%CAghq6%C0D%16%0C%EC%87%81*%03%28%A9%2C%C7%E9%C8%E0%D6q%C6%26%60%DA%CEH%3C%F6I%18%C8%E10%1D%0F%60%98%19Qh%93%A7F%2CN*M%B6-%E4y%87%DB.%B4%99%DF%D9%92%B9%D9hB@%B7/%B3_3V+%E5%D9%88%C1%B6zX%BE%D3BnAM%E6%0A%E0%DEm%D2%12i4%BAa%87%94%F9tWM/%0E%A2g%E4%3E%E97Lf%BF%D7%5C%BA%03F%3A%DC%AC_%EEP%FB%EF%CCOf%60%C5z%DDc%8A%1B%C5%BE%02%3D9%A776%D4%7Es%8E%B8%81%EF%CF%F0zO%A5%8B%C3.%24%29%E0%7F6%EFu4%84%9A%A3%D9%8Ctc%A6%A5%19%E8%9E%EE%8B%B9%16W%9D%5C%95Njj%8Ca%1A2%E5%BAov%B9%DD%DE%A3%19%5Eo6%AFi%B7n%C9T%8F/Z%A0%5C%21%90%CE@%5C%E5%92%19%AD%CC%C9%FF%FA%A7B%DC%FD%E6%FFf4%85%C3%25%09z%DEFq%C7%98%F3%95K%8B%E7fb%04%5DN%E7%9E%3C%28%C6%A2%A0%A0%28%AF%FE%9A%CFI%25%E0%5E%80%D8y%28%01O%8B%D5%BA6%E7eZ%E9%F30M%D3%12%BA%0A%96%AB%AA3h%0E%87%9F%28_%F7%F5t%0A%5B%BB%A2%E6%1C%93%81%99%A9%FA%F1%FA%AA%01by0%C1ij%7B%DDOt%83s%BE%29%8CH/%7C.%3B%0D%F1%EF%7F%3A%F5t%BC%B1zE%3F%A9I%AF%90%15%FA%CCN%CC%3D%C7*_%16+%25%F5%CD%CD%8F%D0C%60%09%25%DE%8F%27%CD@%A8E%09.K%21%5EB%85t%AEcQH%97%E4W%3B%95K%B4%C0%E6%26%BF%93%F4m%F1%CB%B2%88%00%DD%DC%CE%0C%FBD%FC%8Bv%28%EA%FF5%81%89q%F8%97%22%E5%B1%2C_%86%FF%93%0D%EB%A2c%C9q%22%ED4%86By%D6%98%5B%BF%E3%D8%FB%3C%9E%EFR%11%10TR%B2%F8a%B8%85%CA%E16%FF%99c%A3%E7%E2%9C%DE%F3V%89%9A%93%B0%D9%A2%3A%22%BD%B8l1%FE%FB%AA%1B%D5%F7T%3Co%7C%B5%82%D7%1A%C8%F9h%AB%9B%14%BD%29TT%9CO%8Bf%20%8Bs%00%8D%CB%B6o%E9%C6P%16c%AEv%DAX%B6ms%AA%1AB%94Xa%84%0E%D2%5E%BF%A6p%98%EE%F6%A9%EC%A4%95%80%EE%ACq%B8%3E%09%BA%B3%8E%9D%E6BwH%A9%E5%CA2%97%9D@%E8s3%A2%A4%C6%E18%E5%1A%E6%7E%A9L4b%8Ct%5C%FE%25V%D6%03%5B%88M%E8%0E%E40%AA%3A%9E%0E%EE%FC%89%F8%D5%D4%DB%A3M%F8-%C5%9A%29%F1%DA%5E%B6k%EDpX%9D%84%90%7F%E1%19@N%9E%89%CC%93%24%BB%E4%C5%EA%25%AA%1C%C8%02%E3%BCL%01%3E%09%E8%7F@%22%D4%AC%9F%BD%3B/%1F%BD%91%A1%14%B7%3D%E0%26Vl%B2%14%92%C7%B8%8C%D3%25%23D%B83%C9s%10%15%19%1E%AF%12%E2vdF%04%F7ib%FDM%27%D3%D8%DD%16%3C%FE%C7o%BD%8A%3D%0D%F5%F6lF%7F%D8la6r%25%3F%17%D4J%7F%D9%E2%04%F7P%29%C7X/j%EA%29%CEkr%15%28%04%5Eg%1DK+%9D%F7%F2%F8%A2%0F%A3%C7%91%D0%AF%19%3E%9A%0C%90%E7%B08Z%81%8A%94m%D1%26%BF%F8W%FCy%D1%022%E8%1E%BE%FF%5B%C9s%AD%C6%84B%25%CB%9714Y%8B%B8%03%28%20%A3%D9%AD%7Ek%85%DC%14%0E_%25%E4be%8C%16%EFkl%A8%EB%E4%F5%18%9B%DCE%D7%AC%25%C4%2C%90%AEX%A2%F3%AB%09%13U%97%20%9F%C7C%F7%EE%3A%29%FDJ%0A%1C%5B%BA%FD%FE%ED%D5g%F1%D0%82y%1C%DB%C6%E2%25%9F%AA9%B4%83%CF%DB-b%DDX%B1%F6%D9%99%E9%E9iq%E6%1E%D2%86%F1%AA%A6p%B88%C1%DC%AB%E7%93%C5%C0%D6%8A%AD%9Bb%8E1%23%1A%C3%9EH6%E9%C4%9E%BD%94%A0%B4%5By%BC%B7%96%C8%B1%CA%82%10%ABd%08-%3Bk%7E%B2%22%B1%C6%97%DB9%F6%05%09%F8%B7%3D1%B4%EA%04%FCK%E4%ECoj%DCH%85g%C7%95C%CF%B0%AC%28g%7D%F9%CF%E8p%B3h%F0%F5%D5+%2C%EB%88%EE%E39%F4%AA%D8%17G%7FZX%AE%16%D7%2C%81%A1%EDP%DF%DC%7C%D5%EE%FA%031%96%A5%F0%0D%92I%82%BB%7B%FCE%EAYn%7Cq%B6rmSa%F2%B5+2.%FFHB%96%94%3Bd%C9%03m%5D%D3%82%2C%C6%06%26%90%3BtR%FAYq%C1%85n%7C%DA%F3%DE%24t%F2E%1C%BA%B3%87%19%AEk%83%EE%EC%DE%95%02%17%BA+%EDLMs%3C%B7%F0%C7%8DF%A4l%E6%DCI%97%20%2C%CB+%BAV%FB%191%F5%AF%97%9E%04%DC%92k%02%3F%CC%9F%88%DB%A6%DC%1E%FD%8EJ%95%D9%BA%BF-%99%AB%5C%BF+%80%10%B3%00FJ2%13-O%8F%CB%85%0FD%14%26.%C1%B1%F8y%E1d%8C%94%BFINL%A2%B2+%D8%3B%A7%DC%1E%FD%7E%99%2C%7DgU%96c%0E%1AU%AA%99%A5%B8%EBD%23%BA%D5%C7%B6%07%ACE%94%CC%D9NaX%C4-%C1%7F%0A9%F1d%10%3Bh%D5%84%5B%D4%98%B3%C5%24W%A4%AA%C7%A9%E9/%9A%21uf%BD%85%10K%24%C1%24%D1%8A%95%8D%E1%EF%B7%5E%0C%C5%B8%5D%F3%85%A5_%90%C0I%81%23l%C7%E62y%8B1%24%BB%80%B1%09%80%1F%25%1A%87%7EY%3DP%B4%60%1Ecu%1F4%85%C3%BDM%7FQNS8%EC%AF%AD%AF%C73%9F%7F%12s%2CW%97%C2%00%5D%E5%1A%EE%E5%FC%80%0C%19%8E%24%B7%F0Yie%94%C98s%CC%7B%C8%A2%A6C+Wa%CA%8B%9B%C2%A1z%C6n%E9Ep%82%AB%ED%C7%AE%FC%BE%E5*%E6%B7%8Ci%96%88%F0H%08%0A%CA%BB%DE%7C%05%9B%F7%EEij%0A%87/4%FDE%DD%1AC%A1%E7%DE%5C%BD%A2%D5%CF%3Ci%8A%CD%D5%B8f%FB2.%8D3%F7%10a%92+%F4%C6%A4%BC%9B%12%CC%FD@Y%5C%BD%7B%A0%B9%29%E6%18%C6%D2%AC%C5%23%8F%F1%A6y%BA%5B%89l%1C%07k%B1A%E5%27%5E%18+k%B5%90B%ED%AC%13%22%FD%DD%E8%C6%DD%1F%89%91%A6%A4%D4C%F8%B7%D3%18vlL%BDC%D1%E6%BD%7Bb%9E%9F%8B%1Ei%AF%10Sc%EF%F3x%FC%96b%E5%18PqJ%F6xI%B6/c%8C%7D%5Ex%3E%F6%EF%B5%C6%85%160%E7%A5%BE%B9y%F9%E2-%07%95%0A%ADs%E1%9Bx%8D%F3%A3%E0xs%B1W%5B_%BF%85%8A%DA%B6%A0%A4B%7D6%09YRf%97%25%892%A2%5D%E0*%EB%84%F6%B8%A0%3B%DD%92q%5CHpq%E4N%7B%A6G2%DB%E7%C4%A1%3B%86%19%0AH%7B%DE4On%1Bt7%D0%A2%D1%2C%9F/%23%D5t%17O%B9NY%01%98%AFW/Q%99%BAw%8E*%60%AE%B4q%0AL%5C%CCv%84%B5%7B%21%25%F0%99%ACa%7D%A0prT%A9%B2%7C%E67%C5%B3%F0%60%E9%5C%BC%89%1A%2C6%60%AE%8E%ACx%96%FB%1C%F5%AE%92%BC%14S%FB%FA%1D%D1%3AT%EA%FC%FC%9A%FC%89%CA%A5K%ABy%B3a%98OW%96%BB*%D8%A1%11%05%1AZ%01l%3B%00%D43w%FD%2CQ%E4%11%FB%04%07+%C5%8F%1C%14%ECW%AE%DCX%F7%15%E3%3C%A1%96%F0%A7%F1%DC%3C%14%DCB%88%1D%99%7C%D7k.%89%AC%02%83%F6U%BD%28%88%BF0%86dYy%10w%A3%C4-%CEMt%21%0A%87%E6px%89%E9/%BA%C8Z%01%CA3m%B4%F7%24%B5%CE%C9f%0A%00%C6%C69%5DgQN%97%94%3DNC%E5%C6%F8%96%CF%E3%CD%CBLO%A7%7Bv%A7%11%0C%14Y%CAM%94L%87%19L%5C%82%CC%DE%FB%8Au%95%ECr%E3%8C%8BC%84%C6S%85%D7%83%ABlo%9AgR2L%1D%FCb%21%05%00%A5%F3%18%DB%3D%7EE%CB%C0i%29%7BD%D2%F3%B9%EA%9A%1A%BB%C5%99%7B8%B3%A2M%7F%D1%5C%8F%91%D6%10g%EE%21%D6R%09%17%06K%B7m%8E%1ES08%9AHD%85%3E%95%EE%3AK%A9%B0%0C%C6%3E%06%A3%8E%3F%C9%BA7%1E%7B%A3%BD%81%81%D0%C8%FEC%DD6%B4%9Dx%96V%AA%7D%8C%28%BC%8F%CBR%09%FA%3D%AD%D2%15%0Ap%C30%8E%B1%B2V%99%20%26%D6%93%0A%AF%D455z%ED%F3B%A5%21%D6/%A4%C4%8FU%08%E4%CD%DC%0D%B5%BBc%AE%25%7C%83%B6%BC%3E%3F%9F%FF%3A%17%BA%CBM%7F%D1%89B%DB%B5%B2%A0l%D3%A5%9C%02%24%92%3B%BF%B3%5B%88%C27%A5%09%E4%8E%0A9%24%A0%3B%95t%97%0C%DD%C9%B1%3Fr%A1%3Bt%26%DE%8Ax%CAU%EAA%17l%91%92%1Af%02%FFt%CA%ED%B8o%CA%1DJ9%B2%BF%F0%3A%29%BE%BA1wtt%17%1B6%98%98%5B%5B%C5%A0%26%93%9D%AAV%03%FFc%FA%8B%D2%A4%16jxw%C6o%A5%ACf%09j%B8e%5CT%C1%AA%C1C%06%C2%B2%9C%E25x%AE%92%F2%D7%10Y%7B%C08%00%3C%B4%060%DD%2CX%06S%D9%1Dj0%D0%9F%CD%2C%BE%0B%8F%AA%91%A5%F5%2C%D1%B4%D7%3B3P%90N%3AR%3F%D6%29%AC%AAQ%AD3%F8O%7F%12%88%DD%7DE%A6%12%A6%7B%BE%B3%D7%89%03%E5%FB%B0_%93%C2%98B%99%89U.%3F%29c%CC%F7%9B%FA%031%1F%8E%EC%A7b%BB%09S%F1Y%A4%0F%E0%EF._%BDoe%D3%DA%21%BDJ%87%BB%1C%9F%0A%A8%E7%F8%B3%C3m%CA%D8%CF%DCk%7F%80i%E7%9CG%E5vL%BA%C7s/%A3%13v%25%DB%19p%B1b%FA%8B%866%85%C3%0F%AC%D9U%83_%CC%7F%1D%0F-%98%DF%CA%D5%C8%F9%60%8C%A9_%B6%12%CAym%B9%88e%E1%F2%3F%CEX%24%5D%96u%91U%B7%1B%CEC%FC%B9%87%5B%5C%B3%21%D4%BC%3A%CE%DCC%5C%CDe%14%9Aek%BF%3E%F8%7D%FF%13%AD%B9%A7%E0%FA%27%923%BD%04%3C%8EV%1E%93E%2C0%D9D%AE%AF%EA%1DGH%CE%00%C7%87%96I%B29%0E%C9%C0RB%9D%85%F0%AF5f%B5%A1%96%F0%07/.%8Fu%0D3%ABX%04%BD%95%D8%F40c%B1V%FC%9DJ%A3%F9%60r%D5%89%CEya%9E%C2u%23F%AB%B8%FA%E4%BC%B3%07%DA%5E%D9%CE%046%5B%8F%DF%84%CA%95%1E%23%00%3FL%D5x%26%0B%E1%A3%5E%CEg%B4%D1%DE%9B.%A7%AAH%20w%E0%05%F7*%00%00%14%18IDATN%22%AD%EEoj%FC%26%0E%DDQ%DFLI%92%EEx%EC%C5.tW%D9%D9%9E%ECq%B3%85%A9%10%B9_*%1D%E1%F7%CC%9E%A52viIR%D9.%15%F7%AD%C7f%89%B2%13SYd%8FU%86M%D9%B0%E1%14%5B%CFav%7D%F2%F6%97%8D%3E%A8%88wD%1AK%84%9A%24y%0A%B6%C6%15%27%A07%B2%3C%C7%29%E5%BBN%5C%C9%11o8%8E%3D%00%DC@%0B%F6%89%CA%B2%98%2Cb%C6x%EF%9B4%19%B7%E6%8EV%EF%D7N%B9U%5D%E7-s%07%5D%C4f%3B%FB%EB%AEgF%9BS%00%0A%11%B7%27%8D4%B7%AE%A9%B1U%EC%A7%3E%E2%0Eb%A6%F3%F0c%23+%DC%28xMI%A6Iu%8BD%0B%03%9CE%E2%14%C6L%96%92%18%AE+%A8%18%9C%90%D8%5BGPm%20n%5B%D2%EC%8E%9E%B4%0D0%AE%B5%9E%5D%90n+y%3Efn%29%04%A9d%99%28%F2%C8%E5%FF%C2%12%AC%0CoZ%1A%95%EC%D2%B6%E2%CA%C9B%5Ch%83%9A%C3%E17%CB%D7%7D%8D%DBJ%9Ek%E5*%E6%7D0%0E+%B8%3B%09%E5%EElp%D6%16NI0%F7%F1%1A%ACT%27%98%FBQbq%7C%BAb%C7%D6%E8w6%B7%DB%F7%00%9CjY%04L%FC%A1%F7%C0%96%2C%A2%C2%01%92%7D%3B%DD%9B%E6%C9d%B2%09T%2Cn%B3%E5*%EF%88%F5P%96%80%7F%DB%B4%F0l%C8I%C0%BF%B0%F1%E8cu%8D%8D1%1E%03%5B%98%83%C9_%B9%E9%1E%CFy%8C%C5%22%1A%EBW%F2o%BDx%1D%268%E7%85J%81%B1I%B7%97%B3%C4%AE%13%7Cx%A8%A0x%28%1E%ED%C5Qb%EA37%DA%CB%F0x-%BD%F5%7E%1C%BAcF%7BA%92tW%E0M%F3%0Cp%A1%BBN%87%22%12%96%E2PA%AE%00%AAv%18%AC%21mTu%ADk%25%B9%E9%24%E5%BF%8Bd%5D%D2%15%BCW%14%AE%28%1Fg%3F%DF%3F%D1%1B%3EA%9A%F9SI%87%23%C2%B5x%93%92%10%07%83%CD%24%FF%CC%9E%D90%B22%94B5E%81%CB%DA%8C%0A%FB%05*%D8%950B%BC%A7%DF%15%CFR%F1%5BH%9BDu%ACX%C7%C1%D2%B9%AA%DEUbI%ED%E9%CET%CD%8CQ%BB%CB%818%ED8%D5%B68%3F%DE%8F%EC%10%06%1EH%C2w2%E7%86ZvPV%09%04%1A%87%08%A2%04%0AC-%E1%CA%8D%7B%BE%81%FF%959%AA%0D%9ES%00S%A8Y%C9F%3E%8Fw@%1C%CB%BBC%10+%F6%0A%C6%B9%9A%C2a%E5*v%26%20%91Vd%15%DD%A3%0B%E3%CF%A9%C6%DB%EC%E1nW.%E2v%CB%B6%97%E00VHk%C4%EE%9E%E7%82%C2jZ@V%B5%04%E2%FC%AA%D5%96r%EA%88%90%ABM%C0%BFh%C7%B8%5E%93%80%7F%F7%DAB%1D%25i%86%B1%EFM%5B%E9%15%9Fk%F4A%D7%23%279%FDbQ%8A%CCr%95%EC%F4h%1Dlc86je/Mi%EBe%25j%7D%CB%90L%22%D1%EBq%E8%0E%ED%A0%BB%5Eq%E8%AE%D3n%F26%EB%5C%A9%60w%02%D7/%03%CA%F9Z%0B%14QY%A9%E6%10y%11%AB%B5TJh%26Gz%C9Q%ED%3Fl%F5%F3%95%F7%3C%FA%04%ACF%13%9F%D6Va5%60%8Ae%5Bo%15%8BXVp%F5%DE%8D%D8%BDw%23%F6%99%AC%8B%3D%E8J%B6%DD%13%F7%91%3De%19P%B1%1C%C0%EF%CB%FF%AE%2Cj*y*n%BA%82im/%8D%F4%AE%AA%EA@%F3%7E%26%0E%C0%9E8@0%E0%9D%E1%F5%F6Mr%E5%AB%DCA%E3N%1E%1C%F3%21W%AD%E2%8E%60F%CF%F2%9A%FD%B1I%A9dda%B4%94XL.%D8%CB%FDC%ED%A0%0B%8A%A9%FE%89%C0%ACV%27%EC%E5+%ED%84%EB%F8%89%90X%D4%D1%93%B6%05q%7B%16H%96%E3%3E2%D2%AD%25%CF%A9X%A8%B3%B6%8F%F1X%96-x%D3%D2X%98%7EG%8A%EF%A3L%5C%C5*%01%C9%9E%C9%88X%B7k%AAi%60M%82%B9%8F%D7%7F%BB%7F%82%B9%B7%2C%8E%12%26%E0%D9%DD%FC%17%E4%0EQ%C2%CC%5E%0A%215%A3_1%EC%B1%CC%A6%F8%CE%3E%F1d%F5n/%85X%1Dq%BD%7E%D9%11%D7%1C%E7%99%0D%1E%E2%F0/%DA%D1%05%EB%EA%04%FC%FB%81%FD%F3%A6p%F8%D9%F9kV%C7%1C%CB%FAm9v%00c%B0V%DD*%3D%17%02%CB*/%D9%E9%90%03T%AE/%2C%5B%1C%CD%E8M%F4%DAu%E4+We%E1%C7%A3%BD8%F2T%D1%BE%1B%ED5%86C%96%B0j%0F%DDm5M%B3%29I%BA%DB%97%8A%CDU%DAT%AE%10eF7%B1%BC%7EbU%B9PY%D2j%A4%1F%CF%90%8Cb%7F%5E%BE%D5%E0%C1Z%95%15%9F%01%18%17%DA%B2%84%C5%90%B7%A2%C6%5B%F6%D8%AE%E5%13%8E%CD@%26%06%1Bt%3D%BB%BB%0Fi%89%9A%FE%A2%D1%3B%81%BBV%C2%A8%A5%A6b%8C%96%D6u%29j%B0%D2P%8A%95A%FBS%3A0.%8A%E8%C9%04%CE%14na%96%84%19%C3%E2%CE%BB%8B%AE%29%D6%19%DA%F1%FA%AA%E5%9C%F8od%F2%B61F%60%B7%9E8%C9%E22%BD%A9%03%F7%9D%0C%D8%812%E6%9A%B4%D6%C4Er%9D%CB%EF%99u%87%DE%99%B1%9B%00%B0%23%0A%13%93%3Ax%0F%05Nw%1B%C7Y%B29%E3V%A8%93%19%F7%3A2%3E%D9*%8E%F77%B4%EFqI%5DX%928%E8%A2%25g%DD%D5%1C%0Eo%A4%EB%E9O%0B%17%A8%B2%16%E7%B8%C8%3D%DE%D8%9E%87kG%AC%F6%0E%D2%C8%27%B6%A4%8D.%06%D7%A2%F1%E6%1En.%F0t%8FgP%9C%B9%87%A5%5CI%CB%A1%96p%FD%FBk%BF%8A%1E%C3%C5%09%AD%05%AB%14%82%D6%85%ECP6%AB9%1C%AE.%3B%A8%60%A2%D9%C1%96%D5Aa%29%C7%BE%D8%89%E1x%23%01%FF%E6%B7%D5%BC%831wnp%1F%87%7F%E1%E2%AE.%E2-%DB%13px%3D%0A%7Ffk%B3%F3%0F%C4E%29%F7Pj%5B8T%93%0E%EC%16%18%5B*%DAvNb%98%CDH%E2uD6%D0%B7%27+%C5%A1%BD%F1.%3FK%24w6%E1%60%BC%7Bc%92t%F7bS8%FCq%92t%F7%BF%A9x%EE%A4%94k%22l_%BF%09%3D%E0Q%19%89%B4%14%B9-%9D%A0%B7l%BA%9EOMl5%E0gkDi%15%F139%AE%ACI%5C%CB%10%AD%BDZ5%BC%ADW%DD%A9%BB%3B%3A79%C1NN%A6%BF%A8%F7%01%E0%FC%B5%C0%5Db%5D%DF%25%84%D8%A1%ED%E6%84%E8%CB9%B9%C1%C5%9F%C6%7C%C7%26%04%DE%B44%D6c%16%B9%FD%D6%EA%20%E2MK%EB9%A2_%EB%B6a%2C%D2%A6%B1m%3D%3B%09%C0%E9%BE%22Sz%D3%3Cg%25%DA%7DCe%1F%3A%04D%1C%F7%903%86Y%E1vMqa%DD%E0%A2%18%A6%D29o%7F%0E%0A%2C%C9XL%C6%B5%1D%B3*%95%7B%1E%C8%ED%D5%EC%CA%95c%23B%27*%20%AC%120%0BdF%0A%1C%23%18%18%89%83%5B%02Ng%7D%20%5BF%26%02%9B%7Ds%3Cm%99%C0%B5B%3BT%B2%17%86Z%C2%EB%99%F4%F0%D8%27%B1%F2%29%B7%B7%EA%1B%7BR%C2%93%B7%06%E7%A6%DE%08%06%FE%D2%86%97%23%87%CF%B8%DF%91%80%F4%CD%C1%3A%E6%94%82t%9D%ED%CBh%883%F7pZt%AA%95%9Ci%1E%17g%EE%E1p%D9%96%D8%E3c%A41%0A8%AB%14%82JG%CA%CB%A8%94%DE%E6X%5B%8A%CFr%C9%D1%EA%B0%8E%B5e%D2v%14%8F%27%E0_%FE%B74%5E%3C%9Dt%C2%98%7B%02%FE%DD%EB%B2CLuc%28%B4%DE%D9r3%A2%60%5B0%E1%94H%EE%DFk%07%95%F3l%DBo+%0C%C3hvf%C6%DA%E6%25a%9BL%29%27y4U%F9%01%5D%84%F2%04r%E7%D7%8E%E7%C9%89%24%B8%C5%95%3B%F6%B1%7F6I%BA%23%AD%BE%9C%24%DD%A5d%91%D2fo%E1D%A0%D2%1B%92w%3A%FEZ%BD%18+a%D0bU%AE%5DZ%8F%82%97x%DB%D7%DBb%AD%BB%22%B1%D9m%E2%DA%25%7E%B9%11%B8eam%95%DA%20%9D%A5%3E%1B%AB%97P%C1n%EB%0B%F4%EF%11%DB%83%F8%9Bx%B7%235%AC%1F%B5E%88%ED%C0%FD%CC%02%A4%BB%90%0D%B0%ADI%E6%84p%E2%16T%AF%B9%D7%08%06.%93%F2%852%DBF%E5%0F%D2%95H%C5%F1%D3%82%83u%F4%9C%D0%3F-%2C%A3r%E03%CC%92%8FK%F675%3E%12%5C%BC%28%26Ia%EA%99c%2CWF%90%0D%C4Y%0Ef%BBm*%A7k%19B%12%F7f%94%10%9C%F1C%C6%986%ED%AD%FDg%E9%07%5B+%BF%DD%CD%7Bq%5E%F3%BA%91ga%F9%8E%AD%BD%9A%C3%E1%95%E2%06-%93%24%B0%7C6+w%EE%85%29x%3C%D1p%92%C8%B7%D7%D5M1%82%81%8Bd%F7%1E.Z%FEJ%B7%8Ds%3B6%16%E2%DB%2Cz%A22%DC%D2%92%E7%3C%E7%E5C%CF%C0%7BU%AB%3F%E7V%82V%9FT%C6G%EF%7D%A7%14%B3%AFNh%EC%F3%5CA%DE%B3%11%0C%BC%2C%CFW%26q%D02%D9%14%7F%E6%3E%87%8BV%C6%B4%DD%85%E4%7D2%BBw%ABkj%F4%B7%98%F0K%09E%B1%5C%B3V%C6%81%B4%F2%8Cik%B9f%C1V%0A%90rK%A4%AE%A9%F1%C3%E0%E2E%13%5C%E6%9E%D9%AB%D3m%3B%24%11_%24%98%7Bg%1B%D0w%B3%7C%BE%1B%EC%FD%94%CF%3Eq%60%F4%D9h%5D%84Z%C25%B2%B1%C5%0B%DCH%9E%C7Z%DF%DB%15%19%B3%3A%9B%C3%EA%D8%0E%BB%E6dN%3F%9D%B7f%D5%988%FC%DBSz%3C%FF%97%08kkNn%F5%A6%A5%DD%90%80%7F%F9%E7%23q%9A%0B%3C%BEp%C3%DA%DF%F3X%AB%0B%18KohIY%ED%0EE%11%ECu%96%175%87%C3%EF%B3%87%AE%BD_.%FB%EEJG%ACI%B2%13%CCl%5B%12%95%25o.%11Y%80%CE%96%8Et1f%EFoj%CC%8F%23wXoJ%9B%EA6y%3E%B5%D9G%02%DA%7B%C6v%ABog%F9%7C%F7%B6Aw*.%CEE%88%15wM@w%29%1B%C7%8EZ%AE%25t%ED%BEQ%FA%BC%8A%87%5E%8A%E3%22%F9%CC8Ve%F0%8A%FD%D4%8B%CA%B1%9F%B8%8F%A9%88%9F%AD%5E%A2%92%A1d%D7%0C%05%BAw%A9lw%8B%B2%A6r%16S%AB%FF%F1%A2l%99M%2C%E7%2C%EF%F4%13%27%09%11%1C%EC%88%84%FB%E6%BF%11%E3%B2a%DFO%29%FC%E7%AE%20%AF%8A%D2_%E2MK%0B%A6%7B%3C%03%C6%0F%1C%12m%DD%05aL%16o%8B%A0%BE%D9%96%08%A1%84.W%B2%F6%DE%BFdl%F6%DE%14L%93%F8%8Eze%F9%7C3%7D%1E%CFi%8E%A7P%E7%B3%D7%BFA1%F6h%F69M%F7%A6y%5E%95%DF%B3%A5%24K%93%CB%9D%D7%24%81%DD9%F6%02%BA%019%EC%EA%99%D8%26%8F%16%E6%AF%26%1C%DC%1D%8B%E3%F0%D2%F2%25d%F8%AA%B6%DCPTztoq%B1%21%8A%ED%03%FE%7F%EC%80A1%0CFb%AF%8A%8C%EF%D3%F6gj%08%85b%DCl%04%EF%F1%8E1%E7%A7O%CE%3B%BB%D7%BD%17LP%19%BE%F3%A5%B5b28.%BB%07s%E3%A6%F4%EA%96%19%94%AEH%26_%D6%DE%BD7%D8%94%BEM%18%BE%90%D4%C9%1D%98%7B%ED%14UN%D1%AB%5B%26%B3Eg%CA%1C%2C%91%B1%FD%C0%E7%F1%0E%B9k%FC%851%16%3C%05H%7D%A4%14%20%D9%1E%D6%ED%C5%AD%F5%CD%CD-q%E6%1E%92%B0%B7.%C3%EB%5Dw%7C%8F%9E%7D%E2%CC%3D%5C%16%B1e%FC%DC%3E_T%14V%29%84%ECU%FB%0A%84%B7%A8p%BE%B05%7F%27OE%FB%EDF%E6%D2%AD%3C%A3%BD%B8%BE9%1C%AEO%C0%BFY%A4qkN%BCii%1F%A4%7B%3C7%B4%C1%BF%95%09%9A%27%3Cc%18F%8B%DD%CD%CF%E7%B7Jg%16J%D6%AA%F0%82%13%D3%28%1A%9D%5D%89%1E%BE%FC_%C0%8D/2%BC%5E.%0E%1F%B1%C9%82%60%F7t%DF%F4t%8F%E7%B4%3E%99%FF%27%F6m%A6%C2Z%9F@%EE%9C*%CFE%DE%98%92@%EE%BC%E3%A8%89-k%0E%87%9B%DA%A0%BB7q%D0%BB%B0%A7%0D%BA+%EFLW%26%3B%3Ad%B9%D2%9Df%04%03%BFY%88pf%EF%E2%97U+%C2%09%1C%80%8A%95%AA%89%FF%DA%88%02%CD%A5%BFmr%7E%A4%B4%E0%C5%D2%B9%10%D1%CFe%B9%B3%C7%EFC%1B%80GX%DB%CA%92%1A%C6m%9B*%CA1%CE%C8P%CA%F6%C9u%8BQ%1D%F1%85%BF%9A%8A%87n%C7sr%FF%C2%82%A6p%28%8F+H%FB%EE%23%7C%A7%AB%87%8A%C1b%5Cf%9F%B1%D6%CAY%CB%F5%DB%F2w%C1%C4%A5PK%CBC.%05%F13%1AC%A1%AB_X%B68%9B%BF%B7%94%CE%04%B5%A3%C5%89%AD%9Ads%FB%27%12%E4%E5%C5%B3%A2%9FI%CF%D8%F5%9E%B4%B4%81%14%CE%D6%3D%F2%3E%E6%5C%F3%03%CC%5B%13%C9%80c%1F%D2%DA%FAz%BA%5C%A66%86B%CB%DA%BA%A6%FD%3B%EBY%7E%5D%F6%8E%25%5C%5D%B7%DC%B3%E3%97%1F%BC%85%87.%9D%A4%08%D7%22%7E%EB%FE%ED%E7%9C%F9%DE%1B%1C%1B%3A5%EC%AE%F6%92PK8%9F%CD%EFo%1AuvL/b%A7bnO%DFSZ%B7%1C%8B%AA%DD%BB%D4%B5%ED%1Bbs5k%CD%1D%3F%A7P%F6y%3C%EC%80%F4%5C%D2%17%B0%81%A5%06V%29%05%AF%C5%05%84%B5%08p%EB%B1L/%09W%F6%B2z%EE%D06wmA%2C%C7%87_X%B6%F8%9EN%CC%7D+%05%23%E7%AD%5E%B8q%5D.%7BE%C3V%D3h%C5%19%EB%9B%9B%ED%8B%94%CA%8F%D7%AF%CD%BBS%16%91%D6%B1t%1BJ%BB%BAN%5B%0FrO%97%B3CX%8A%F8wo%A26%83%14%CAF0%F0E%D9%DA%AF%BFk%1F%3B%8B%DE_%5B%B5%CC%EA%13%DE%CA%BB%26%F7%FA%D3%85%1B%D6%FE%86Y%EC%14%FA%10%05%FB%EC%B5S%23.i%9BK%95%F7jYvO%FD%E3%23%94%7E%B9%AC%B3%C3%D5%A5%90%B1%A1%AC%7B%95%89Z%1D%A4%BDFi%B9%1B%83%A6p%B8b%E1%C6u%E7%24%A0%3B%FB%F6V%F3%3F%5E%BF%F6%EA%AE%A4%3B%0B%9Dq%0B_%B2%1Ax%17%A8%C9%FC%ACx%96%DA%95w%BB%B4%21dW%9F%2C_%C6-%7D%98%B4%92%7B%92R%BA%1C%B6%DD%91%0E%06C%9A%22%3B%82%CC%94%3A%B9%F5%A2%ACg.%05r%C6U%ACT%96%EEC%92YLWr%8F%88b%ADjg9M%AA%A0%9A%3B%D35%C3%D2%09%BA%19h%DD%8C%13%C1%C8w%B7%AD%CBH%10Tt%CCH%15%DC%E5%B6%C5%98%10%DD%F9%A1%96%96%0F%1F%FB%A4%3C%9B%7B+N%19%3D%26%9AL%E3%B6%05%94%B3%03%8F%E0%FE%FA%E6%E6%E0_%BEX%A8%FE%B2%84%88%BD%99%3B%89%8D%85%E4%C2%C8I_%D3%B1%ED%18%A4-c%9B.%BB%B5%BBw%E1%A6%97%FE%8A%07%BEw%85%EBsP%60P%B1%8A%C0%B9%D8e%03%F1%19%86%81%81%B4%1A%AC%86%E3v%F0%9E%9E%FE%EC%E3%B6n%23%06V%13v%E76Zvp%21%C0%7D%3F%EB%1A%9B%E8R%BA%AD%23%19%AB%EC%01%CBL%E4sO%1E%ACb%3A%A4%91x%3B%EDp%1C%5EY%B1%04K%B6l%B2%DC%8E%C5%29%D8%8E..L%7F%D1%7F%18%C1%C0%D0%C7%3E%29%9F%D8%81%B9%AFLP%CAR%BA%A3n%DFt%BB%5B%14R%0A%C1%EC%5D%87%25%3E%7BOC%FD%23%CE%A6%F8%3C%B6%13%258%AD%20%EEa%96%3E%BD%3E%7B%F1%A2%ACN%F0oe%92%9B+%FCx%C9%D6M%0B%9Cc%C0%F3Ie@%DC%E6%04%A6%BF%E8%B7F00%E2%C3%F5U7%7CY%B3%0D7%9F5.%A61%BD%1B%BD%F2%BCR%1At%C4C%5C%B3%FEPKK%F0%B1O%CA%D1N%DA%23Q%8C%8DcU%CE%DAQ%B7%EF%9C8t%07%07-%CD%D9%D3P%7Fu%02%BA%3B%FC%CA%951N%23%188m5P%BC%3A%12%CF%82%C4-h%7D%1C%DF%AF%A9%11%23%10I%A3%5EXY%AE%92%98N6M%9Ce%188%0E%C7%A2%1C59%8B%23%8D%14%2C%9F%C6%C4e%C0%82%3FV%94%19%E7T%96c%84%B8%83Y%CB%BA%0C%A8%97%82%F4C%0E%AB%3E%92%AB.%E9%B2%D3S%F6sT%19%AA%C3%8E%ED%1F%DD%C8%18%D2%CE%EB%EB%5D5*iB%26%96%CFxG%22%17%9FX%9E%E7%87%CD%96%C7%3F%DB%B4a%7C%C5%D6%CD%AE%1B%08s%DF%C5%B5%DF%EC%B2%122%9C%E7%E0%06%CF%A3%B8%87%EC%B3%95%9F%83%0B%813O89f%23%E7o%1A%0E%B8%5D%F3o%9Fm%DA0%9C%D7df%1E%CB@%1C%9B%16+%D7%28%DDYM%E1%10%D7O%97%B5%27%16F%C5I%05%CA%E7%B16%F3%E6y%99%B5%27%3B%FE%F0%A6%AEp%9ES%16%1D%85%8D%A1P%F9%D6%7D%7BzN%7E%B1%18%D6%E6%CF%D6%EF%C5%7DZ%25%DB%0D%C7%B8%9B%9C%F1g%A8%5DG%D2%94%C2%23%06%F7%3E%06%03z%F5%8Ea0Z%B3%CB%B7oAsK%98%F7E%9A%BB%B13%AD%F7h%812cu%D1%C6H%A2%C4Y%8E%F9%A0R%5D%B5s%BB%9DV%88%07%DC%DC%8E%5C%D5/s%24%83%C4%83%FDX%B7q@d%7C%19%8B%FF%C9g%9B6%CC%AC%D8%BA9%23%89%B9%E7%C7%A5%A2%60%E2%B9%CDJ2%D3%D3%A7%3F%F5%8F%8Fc%C6U%F2%07%E69%8EU%C9%7C%9C3%B7cS%E5%9A%C3A%05%3B%BC%29%1C%9E%C3%CD%DF%DB%C9%BF%C4%1Fe%A3%826%EF%C9%F4%17%7D%98%F9%B7_4%FC%E1%A3%0F%BA96%E1G%A4%88%22qN%88%E9/%E2%D6%8B%EFn%DE%BB%E7%89%DF%7D8%3F%93t3%ACo%BF%18%C5%CA9%AD%AE%DD%8D%F5%12%06j%8ES%12%D7%1E%9A%B1%83%19%F9v%5Erk%D9%E9%06u%9C%EDwq%9E%8Fr%AA6l%B6%14%7F%B6iC%CF%24%E5N%A5%F4W%8E%B7%B0Q%5B%D0%C5%A1%BB%AF%1C%BFKDw%9B%3B%DB%95%C9%0E%C3tdd%A6%E4%A4%C1%C0%8C%C1%C0%23%EC%96%A4%12%9C%D8%16Q%BAK%1C%AFv%DA%C9P%3B%D8H_%B3%A8Eg%04%03%2C%05yn%28%60%F8%24%90%B9%29%A2XO%3BLVk%0C%24%8Bm%AA%BCZ%25%DB%D8%C0%25%EA%7B%5C%9D%B7W8K%F2%D1T%15%C2%06%B2%5C%0E%D9%2C%BB%FB%94I%E3%FEj%C7%EF%0B%24%11%C9%AD%91%F7j%11%12%CF%3B%7E3U%DC%5Dn%BF%D9/%B1%EE%97%E2%F5%1Fe%D6n%B6/c%E6%CF/%BC%2CF%08%88%EB%BAT%FEt%9E%7B%BB%EC3%FAh%22%A1%25%D9%B6T6S%5C%7E_%24%5E%8F%B28%B5%B3d%ACKl%E7%29%90%D79%B6%24%90V%BF%91%84%B3%D9%1D%15%F0r%AD%A9r%ADQn%9B%068%B0%5EV%CC%8F%BA%CC%E7%28i%85%E9%D6%BB%EF%7E%FB%9C%C8%3C%06%5C%8Em%90%B1j5%7FB%D33%A4%F4k%88%CB5%18%A0z_%EE%AD%CDE%95%24%DE%B8%95%22%CDp%D9%B0%3D%DE%B1%F7wU%AF%5B%E1%0F%8E%D3%BFH%A3%8Ex%A8%14%1Ek5%27I%5C%A3%C8%CD%7D%29%9B%7E%5D%96%0C%5D%D9d%CDM%91%F6%01%AE%B0%CB%822k%7E%989%2CmZ%DDh%A60%D1%3C%0A%BD%B9%C9%ACZ%19%0B7%1A%9A*4%E46%97%AE%D7%B3%3D_a%9C%C6%3C%FB%A5%81%CB%D3%C9%E4%1E%18%C1%C0Gq%B2%FA%5B%D1%92%11%0C%BC%1Dgk%CBGS%E91%EAR%E5%CA%ECa%EE%94%C32%9B%92%DA*%CB%02%CD%BC%06%5E%F8%10R%0A%D7%E9.%95%A6%13%D3%E4%E1%CB%BB%D2%3D%D6Y%C4%A9%95%ABN%E9%EA%E7%E05*%DA+%EC%85%80G%B5%E7%9El%BFA%B2%095m%28%D7%A8%25%26%8C%9B%D3%D1D%9D%CE%FE%3E%CE9%AD%F1M%E9%BC%25%B8%8E%13%ED%9E%D7%AE%84%2C%0C%F8%AAME%21%FD%91%0C%DB%B3%1E%D1s%02%07_%1E%89%F7%D7Y%7C%1B%E9%AEK%94+%22%83%D52%CC4%8D%87%A7F%9A%DB%04%A5%27q%96%09%DC%3C*%1FK+%17%E1%E9H%DBC%D7X%A4%C6%FF%1D%24%AB%5C5444%8E%16t%AA%CE%B5%0D%94%D6%19F%21w%CA%E1%B6q%7E%D9%3C%1D%92U%BC%2C%A2XM%ADX54444%BEm%E82%E5%CA%EEHF0%B0%A4%01%18%B5%B1%FC5%F4*%8F%04%00%1Adw%60+%ABXS%94%86%86%86%86%C6%B7%0D%5Di%B9R%C1%8Ef%FCu%27p%27%00+un%97%E8%D6%3FHW%25%8Do%09%3A%9A%9D%A8%A1%A1%A1%F1mC%97*WH%C3%89%14%B6%24%D48B%C1F%FC%B6%9A@%0D%0D%0D%8D%A3%1A%5D%96%D0%A4%A1%A1%A1%A1%A1q%B4%A2%D3%BB%E2hhhhhhh%D8%00%E0%FF%03%042%1E%1A%D2yk%F4%00%00%00%00IEND%AEB%60%82") );
			var help = _fr.add(
				'iconbutton', 
				undefined, 
				unescape("%89PNG%0D%0A%1A%0A%00%00%00%0DIHDR%00%00%00%18%00%00%00%19%08%06%00%00%00++%EE%5D%00%00%00%09pHYs%00%00%0B%12%00%00%0B%12%01%D2%DD%7E%FC%00%00%02-IDATH%89c%FC%FF%FF%3F%03-%01%13MM%A7%87%05%2C%84%140%CE%AF0%60%60%60%00a%05%24%E1%0B%0C%0C%0C%07%FE%27v%7C%20%A8%1FW%1C0%CE%AF%28%E0%60a%AD%FA%FB%FF%1F%AF%B1%94%1C%87%B2%900%5C%EE%F4%D3G%9Fo%BDy%C5%CB%C6%CC%B2%FC%D7%DF%3FY%F8%2C%C2i%81%C0%F2%C6%8B%E1%BAFzz%12R%0C%97%5E%3Cc%F8%FA%EB%27X%DCRN%91AIH%84%E1%E5%97%CF%0C%D3O%1E%FE%7D%E9%C5%B3%FB%3F%FE%FC6%C7e%09%5E%0B%7E%FC%F9%AD%C9%C2%C4%F4%E5%EB%AF_%87%A0%C1%22%C0%C2%C4%94%1A%AEk%C4%15m%60%0AVW%BB%7B%CB%D7%B3%CF%1E%F7%FCO%ECh%C0f%0E%CE8%F8%F8%E3%FBz%06%06%86%FC%1F%89%1D%07P%5C4%BFb%C2%EA+%E7oD%1B%98%B2%83%F8%5E%EA%DA%DCw%DE%BD%09d%60%60%20%CD%02%5C.%FA%9F%D8%F1%80q%7E%05%3B%B2%D8%9F%7F%FF%FE%E02%87%E4d%CA8%BF%22@%80%83%F3%1B%8C%BF%E6%CA%F9%1F_%7F%FD%DCL%15%0B%18%E7W%08%B01%B3%CCH4%B6%E0%02%F1w%DF%B9%C1p%FB%ED%EB%7F%0C%0C%0C%13%A8b%01%1B3%CB4e%21a%7EW%15%0D%B0%E1%93%8F%1F%FC%FE%E7%DF%3Fk%7C%C9%94h%0B@%91+%C6%C3%13%D0%E4%E2%CDq%FC%D1%7D%98%E1V%FF%13%3B.%E0%D5GLa%C78%BF%C2%81%8D%99e%E7%CC%80%086P%7E%28%DC%B6%EE%C7%EF%BF%7F%23%FF%27vl%20%A4%97%28%1Fp%B3%B1%CD%CD%B6%B0e%13%E7%E1e8%F2%F0%1E%C8%F0%99%C4%18N%94%05%8C%F3+%14%7E%FF%FD+%0D%0Aw%10%B8%FA%F2%F9gP9D%8C%E1%0C%C4%14v%A0B%8E%9B%8D%FD%FF%D2%0B%A7%C1%9C%27%9F%3E%F0200%10%2C%E4H%B1%E0%C1%FB%EF%DF%3A%97%5E%3C%83%22F%AC%05%03_%1F%80%82H%90%93%AB%DCKM%8B%03%C4%D9v%EB%DA%8F%F7%DF%BF%1D%20%D6%17%C4X%C0%20%C4%C9%F5%3D%DA%C0%14l%C1%89%C7%0F%BE%BF%FF%FE%8D%B0%26R%2Cx%F7%FD%1B%27%2C%92Al%A2M%A7G%24%0F%F1f%0B%03%03%03%00T%A5%F5%85%11%F3X%B2%00%00%00%00IEND%AEB%60%82"), 
				{style: "toolbutton"} 
			)
			help.onClick = function() { openWebsite( "https://www.project-octopus.net/script-watermark" ) };
		}
	


		w.state = _state;
		w.opt = w.main.add("panel { text: '" + __('Options') + "', alignChildren: ['fill', 'fill'] }");
		w.mf = w.opt.add("checkbox {text: '" + __('Mark Textframes') + "'}");
		w.mf.value = w.state.mark_frames;
		w.mf.onClick = function () {
			this.window.state.mark_frames = this.value;
		}
		w.scc = w.opt.add("checkbox {text: '" + __('Show Char-Count') + "'}");
		w.scc.value = w.state.show_count;
		w.scc.onClick = function () {
			this.window.state.show_count = this.value;
		}
		w.st = w.opt.add("checkbox {text: '" + __('Show Threadlines') + "'}");
		w.st.value = w.state.show_thread;
		w.st.onClick = function () {
			this.window.state.show_thread = this.value;
		}
		if (!sk_special_edition) {
			w.tc = w.opt.add("checkbox {text: '" + __('Inspect Tablecells') + "'}");
			w.tc.value = w.state.inspect_tables;
			w.tc.onClick = function () {
				this.window.state.inspect_tables = this.value;
			}
		}
		if (! do_update) {
			w.ml = w.opt.add("checkbox {text: '" + __('Mirror Layout') + "'}");
			w.ml.value = w.state.mirror_layout;
			w.ml.enabled = ( w.state.pos == 0 );
			w.ml.onClick = function () {
				this.window.state.mirror_layout = this.value;
			}
		}

		w.colors = w.main.add("panel {text: '" + __('Colors') + "', alignChildren: ['fill', 'fill'], orientation: 'row'}");
		w.col = [];
		for (var n = 0; n < colors.length; n++) {
			w.col[n] = w.colors.add("radiobutton {text: '" + __(colors[n].name) + "', value: " + (w.state.color == n) + "}");
			w.col[n].ix = n
			if (n == w.state.color) w.col[n].value = true;
			w.col[n].onClick = function () {
				w.state.color = this.ix;
			}
		}

		if (!do_update) {
			w.rb = [];
			w.position = w.main.add("panel {text: '" + __('Position') + "', alignChildren: ['fill', 'fill']}");
			w.rb[0] = w.position.add("radiobutton {text: '" + __('Right of Page') + "' }")
			w.rb[1] = w.position.add("radiobutton {text: '" + __('Right of Frame') + "' }")
			//			w.rb[2] = w.position.add("radiobutton {text: '" + __('Below Page') + "' }")
			w.rb[2] = w.position.add("radiobutton {text: '" + __('Below Frame') + "' }")
			w.rb[w.state.pos].value = true;
			for (var n = 0; n < w.rb.length; n++) w.rb[n].ix = n;
			for (var n = 0; n < w.rb.length; n++) {
				w.rb[n].onClick = function () { 
					this.window.state.pos = this.ix 
					if ( this.ix == 0 ) {
						w.st.value = true;
						w.state.show_thread = true
						w.ml.enabled = true;
					} else {
						w.st.value = false;
						w.state.show_thread = false;
						w.ml.enabled = false;
					}
				}
			}
		}


		w.defaultElement = w.btns.add("button {text: '" + __('Go') + "'}")
		w.state.process = "build"
		if (do_update) {
			w.defaultElement.text = __('Update');
			w.state.process = "update"
		}
		w.defaultElement.onClick = function () {
			this.window.state.wpos = this.window.frameLocation;
			this.window.close(1);
		}
		if (do_update) {
			w.reset = w.btns.add("button {text: '" + __('Remove') + "'}")
			w.reset.enabled = do_update;
			w.reset.onClick = function () {
				this.window.state.wpos = this.window.frameLocation;
				this.window.close(2);
			}
		}
		w.cancelElement = w.btns.add("button {text: '" + __('Cancel') + "'}")
		w.cancelElement.onClick = function () {
			this.window.state.wpos = this.window.frameLocation;
			this.window.close(3);
		}
		// w.v = w.add("statictext {text: 'v" + script_version+ "  '}")
		// var _ft = w.v.graphics.font;
		// w.v.graphics.font = ScriptUI.newFont( _ft.family, _ft.style, 7);
		// w.v.alignment = "right";
		// w.onShow = function () {
		// 	if (w.state.wpos) {
		// 		// $.writeln(JSON.stringify(w.state.wpos));
		// 		w.frameLocation = [w.state.wpos.x, w.state.wpos.y];
		// 	}
		// }
		var rs = w.show();
		doc.insertLabel("gs_show_overflow_prefs", JSON.stringify(w.state))
		app.insertLabel("gs_show_overflow_prefs", JSON.stringify(w.state))
		if (rs == 1) {
			show_overflow(w.state);
		} else if (rs == 2) {
			clear_overflow();
		}
	}


	function show_overflow(prefs) {

		var wpb = new Window("palette");
		wpb.task = wpb.add("statictext", [undefined, undefined, 400, 20]);
		var pb = wpb.add("progressbar", [undefined, undefined, 400, 20]);
		pb.value = 1;
		wpb.show();


		var do_update = prefs.process !== "build";
		if (!do_update) {
			clear_overflow();
		}
		// --------------------------------------------------------------------------------------------------------------
		//	Default Einstellungen
		// --------------------------------------------------------------------------------------------------------------
		wpb.task.text = "settings"
		if (!prefs) {
			prefs = doc.extractLabel("gs_show_overflow_prefs");
			if (prefs) {
				try {
					prefs = JSON.parse(prefs)
				} catch (e) {
					prefs = null;
				}
			}
			if (!prefs) {
				prefs = {
					mark_frames: true,
					show_count: true,
					show_thread: true,
					inspect_tables: true,
					mirror_layout: true,
					color: 0,
					pos: 0
				}
			}
		}

		// --------------------------------------------------------------------------------------------------------------
		//	Farbe
		// --------------------------------------------------------------------------------------------------------------
		var swatch = doc.swatches.item(__('Overflow'));
		if (!swatch.isValid) {
			swatch = doc.colors.add({
				name: __('Overflow'),
				space: ColorSpace.CMYK,
				colorValue: colors[prefs.color].value
			})
		} else {
			swatch.colorValue = colors[prefs.color].value;
		}


		var anschnitt_w = doc.documentPreferences.documentBleedOutsideOrRightOffset;
		var anschnitt_h = doc.documentPreferences.documentBleedBottomOffset;

		// --------------------------------------------------------------------------------------------------------------
		//	Ich will hinterher alles wiederherstellen können
		// --------------------------------------------------------------------------------------------------------------
		wpb.task.text = "fallback values"
		if (!do_update) {
			var fallback_values = {};
			fallback_values.ruler_origin = doc.viewPreferences.rulerOrigin.toString();
			doc.viewPreferences.rulerOrigin = RulerOrigin.SPREAD_ORIGIN
			fallback_values.slug = {
				uniform: doc.documentPreferences.documentSlugUniformSize,
				top: doc.documentPreferences.slugTopOffset,
				left: doc.documentPreferences.slugInsideOrLeftOffset,
				bottom: doc.documentPreferences.slugBottomOffset,
				right: doc.documentPreferences.slugRightOrOutsideOffset,
			}
			fallback_values.screen_mode = doc.layoutWindows[0].screenMode.toString();
			doc.layoutWindows[0].screenMode = ScreenModeOptions.PREVIEW_OFF;
			fallback_values.frame_edges = doc.viewPreferences.showFrameEdges;
			doc.viewPreferences.showFrameEdges = false;
			fallback_values.pasteboard_margins = doc.pasteboardPreferences.pasteboardMargins

			doc.insertLabel("gs_overflow_fallback_values", JSON.stringify(fallback_values));
		}

		// --------------------------------------------------------------------------------------------------------------
		//	Platz schaffen
		//	Edit: "Unter der Seite" machen wir nciht mehr und neben der Seite brauchen wir auch nur bei pos==0 Platz
		// --------------------------------------------------------------------------------------------------------------
		if (!do_update) {
			if (prefs.pos == 0) {
				var min = doc.documentPreferences.pageWidth * 1.1;
				doc.documentPreferences.documentSlugUniformSize = false;
				doc.documentPreferences.slugRightOrOutsideOffset = min + anschnitt_w;
			}
			// if ( prefs.pos == 0 || prefs.pos == 1 ) {
			// 	var min = doc.documentPreferences.pageWidth * 1.1;
			// 	doc.documentPreferences.documentSlugUniformSize = false;
			// 	doc.documentPreferences.slugRightOrOutsideOffset = min + anschnitt_w;
			// }
			// if ( prefs.pos == 2 || prefs.pos == 3 ) {
			// 	var min = doc.documentPreferences.pageHeight * 1.1;
			// 	doc.documentPreferences.documentSlugUniformSize = false;
			// 	doc.documentPreferences.slugBottomOffset = min + anschnitt_h;
			// }
		}

		// --------------------------------------------------------------------------------------------------------------
		//	Aufräumen und Neubau
		// --------------------------------------------------------------------------------------------------------------
		wpb.task.text = "layers"
		var of_layer = doc.layers.item(__('OF-Frames'));
		if (!do_update) {
			if (of_layer.isValid) of_layer.remove();
			of_layer = doc.layers.add({ name: __('OF-Frames'), layerColor: UIColors.TAN });
		}
		of_layer.locked = false;
		of_layer.move(LocationOptions.AT_BEGINNING);
		if (prefs.pos == 0 && !prefs.mirror_layout) {
			var slot_layer = doc.layers.item("of_slots");
			if (!slot_layer.isValid) slot_layer = doc.layers.add({ name: "of_slots" });
			slot_layer.move( LocationOptions.AT_BEGINNING );
		}

		// --------------------------------------------------------------------------------------------------------------
		//	Wenn wir OTFs stapeln, Zielrahmen erstellen und Überlappungen entfernen
		// --------------------------------------------------------------------------------------------------------------
		if (!prefs.mirror_layout && prefs.pos == 0) {
			wpb.task.text = "create slots"
			pb.maxvalue = doc.pages.length;
			var empty_otfs = [];
			for (var np = 0; np < doc.pages.length; np++) {
				pb.value = np;
				empty_otfs[np] = [];
				// ----------------------------------------------------------
				// --------- Rahmen neben der Setie ermitteln ---------
				var pg = doc.pages[np];
				var _dir = (pg.side == PageSideOptions.LEFT_HAND) ? -1 : 1;
				var _all = pg.parent.pageItems.everyItem().getElements();
				var _sides = [];
				for (var n = 0; n < _all.length; n++) {
					// is neben Seite
					if (
						(_dir > 0 && _all[n].geometricBounds[1] > pg.bounds[3]) ||
						(_dir < 0 && _all[n].geometricBounds[1] < pg.bounds[1])
					) {
						_sides.push(_all[n]);
					}
				}		// all loop

				// ------------------------------------------------
				// --------- erst mal alle slots zeichnen ---------
				var slot_width = (pg.bounds[3] - pg.bounds[1] - (slots_per_clm - 1) * slot_gap) / slots_per_clm;
				var _h = (pg.bounds[2] - pg.bounds[0] - (slots_per_clm - 1) * slot_gap) / slots_per_clm;
				var _zero_x = (_dir < 0) ? pg.bounds[1] - slot_gap * 2 : pg.bounds[3] + slot_gap * 2;
				var _zero_y = pg.bounds[0];
				for (var x = 0; x < Math.floor(slots_per_clm / 2); x++) {
					for (var y = 0; y < slots_per_clm; y++) {
						if (_dir < 0) {
							empty_otfs[np].push(pg.parent.textFrames.add({
								fillColor: "Cyan",
								fillTint: 20,
								itemLayer: slot_layer,
								geometricBounds: [
									_zero_y + y * (_h + slot_gap),
									_zero_x - x * (slot_width + slot_gap) - slot_width,
									_zero_y + y * (_h + slot_gap) + _h,
									_zero_x - x * (slot_width + slot_gap),
								]
							}));
						} else {
							empty_otfs[np].push(pg.parent.textFrames.add({
								fillColor: "Cyan",
								fillTint: 20,
								itemLayer: slot_layer,
								geometricBounds: [
									_zero_y + y * (_h + slot_gap),
									_zero_x + x * (slot_width + slot_gap),
									_zero_y + y * (_h + slot_gap) + _h,
									_zero_x + x * (slot_width + slot_gap) + slot_width,
								]
							}));
						}	// links oder rechts
					}		// y slots
				}			// x slots

				// -------------------------------------------------------------------
				// --------- dann alle löschen für die es Überlappungen gibt ---------
				var tol = 0;
				for (var n = empty_otfs[np].length - 1; n >= 0; n--) {
					var _slot_gb = empty_otfs[np][n].geometricBounds;
					piloop: for (var m = 0; m < _sides.length; m++) {
						var _da_gb = _sides[m].geometricBounds;
						if (
							_slot_gb[0] - _da_gb[2] > tol || 	// da drüber
							_da_gb[1] - _slot_gb[3] > tol || 	// da rechts
							_da_gb[0] - _slot_gb[2] > tol || 	// da drunter
							_slot_gb[1] - _da_gb[3] > tol			// da links
						) { /* do nothing, slot OK */ } else {
							empty_otfs[np][n].remove()
							empty_otfs[np].splice(n, 1);
							break piloop;
						}	// Slot check
					}		// pi loop
				}			// slot loop
			}				// pg loop
		}					// if Stapel




		// --------------------------------------------------------------------------------------------------------------
		//	Bei Update müssen indicatoren etc ggf gelöscht werden, wenn die Option jetzt aus ist
		// --------------------------------------------------------------------------------------------------------------
		if (do_update) {
			wpb.task.text = "remove stuff"
			var tfs = doc.pageItems.everyItem().getElements();
			for (var n = tfs.length - 1; n >= 0; n--) {
				var aux = tfs[n];
				if (tfs[n].hasOwnProperty("name") && tfs[n].name) {
					if (!prefs.show_count && tfs[n].name.substr(0, 4) == "cctf") {
						tfs[n].remove();
					} else if (!prefs.show_thread && tfs[n].name.substr(0, 4) == "oln-") {
						tfs[n].remove();
					} else if (!prefs.mark_frames && tfs[n].name.substr(0, 4) == "itf-") {
						tfs[n].remove();
					}
				}
			}
		}


		// --------------------------------------------------------------------------------------------------------------
		//	Stories durchgehen - #### Es muss noch gelöscht werden von Stories, die nicht mehr überlaufen
		// --------------------------------------------------------------------------------------------------------------
		wpb.task.text = "inspect stories"
		var all_stories = doc.stories.everyItem().getElements();

		var stories = [];
		var tf;
		for (var n = 0; n < all_stories.length; n++) {
			tf = all_stories[n].textContainers[all_stories[n].textContainers.length - 1]
			if (all_stories[n].overflows && tf.parentPage) {
				stories.push(all_stories[n]);
			}
		}
		// --------------------------------------------------------------------------------------------------------------
		pb.maxvalue = stories.length;
		for (var n = 0; n < stories.length; n++) {
			var sid = stories[n].id;
			pb.value = n;
			if (stories[n].overflows) {	// eigentlich überflüssig, weil oben schon gecheckt
				var tf = stories[n].textContainers[stories[n].textContainers.length - 1]
				var parent = tf.parentPage;
				if ( parent ) {
					if ( parent.parent.constructor.name == "Spread" ) {
						if (prefs.show_count) {
							var cctf = make_cctf(tf, sid)
						}
						var otf = make_otf(tf, sid);
						if (prefs.mark_frames) {
							var itf = make_itf(tf, sid);
						}
					}
				}
			}
		}		// story loop

		// --------------------------------------------------------------------------------------------------------------
		//	Tabellenzellen durchgehen
		// --------------------------------------------------------------------------------------------------------------
		if (prefs.inspect_tables) {
			wpb.task.text = "inspect tables"
			pb.maxvalue = all_stories.length;
			var tables = [];
			var tables_in_of = [];
			for (var n = 0; n < all_stories.length; n++) {
				pb.value = n;
				// Ich weiß nicht, warum es sein kann, dass eine Story hier nicht mehr valid ist, aber es passiert.
				if (all_stories[n].isValid) {
					var _tables = all_stories[n].tables.everyItem().getElements();
					for (var m = 0; m < _tables.length; m++) {
						if (_tables[m].parent.constructor.name == "TextFrame") {
							tables.push(_tables[m]);
						} else {
							tables_in_of.push(_tables[m]);
						}	// tab in rahmen
					}		// tab loop
				}
			}			// story loop
			// --------------------------------------------------------------------------------------------------------------
			for (var n = 0; n < tables.length; n++) {
				var cells = tables[n].cells.everyItem().getElements();
				for (var c = 0; c < cells.length; c++) {
					if (cells[c].overflows) {
						if (prefs.show_count) {
							var cctf = make_cctf(cells[c], cells[c].id)
						}
						make_otf(cells[c], cells[c].id)
						if (prefs.mark_frames) {
							make_itf(cells[c], cells[c].id)
						}
					}
				}
			}
		}


		// --------------------------------------------------------------------------------------------------------------
		//	Wenn Update, muss der Kram gelöscht werden, ,der nicht mehr überfliesst
		// --------------------------------------------------------------------------------------------------------------
		if (do_update) {
			var _dbg = false;
			var all_frames = of_layer.textFrames.everyItem().getElements();
			wpb.task.text = "remove empty overflows"
			pb.maxvalue = all_frames.length;
			var ids = [];
			for (var n = all_frames.length - 1; n >= 0; n--) {
				pb.value = all_frames.length - n;
				var id = (all_frames[n].name.substr(0, 3) == "otf") ? all_frames[n].name.substr(4) : null;
				if (id) {
					var story = doc.stories.itemByID(Number(id));
					if (story && story.isValid && story.overflows == false) {
						if (_dbg) $.writeln( "Story " + id + " ist gefixt")
						all_frames[n].remove();
						ids.push(id);
					}
				}
			}
			wpb.task.text = "remove empty indicators"
			for (var n = 0; n < ids.length; n++) {
				var items = of_layer.rectangles.everyItem().getElements();
				pb.maxvalue = items.length;
				for (var m = 0; m < items.length; m++) {
					pb.value = m;
					if (items[m].name == "itf-" + ids[n]) items[m].remove();
				}
			}
			wpb.task.text = "remove empty indicators"
			for (var n = 0; n < ids.length; n++) {
				var items = of_layer.pageItems.everyItem().getElements();
				if (_dbg) $.writeln( items.length + " page items");
				pb.maxvalue = items.length;
				for (var m = 0; m < items.length; m++) {
					pb.value = m;
					if (_dbg) $.writeln( "- " + items[m].name );
					if (items[m].name == "oln-" + ids[n]) {
						items[m].remove();
						if (_dbg) $.writeln( "-- gelöscht");
					}
				}
			}
			wpb.task.text = "remove empty counters"
			for (var n = 0; n < ids.length; n++) {
				var items = of_layer.textFrames.everyItem().getElements();
				pb.maxvalue = items.length;
				for (var m = 0; m < items.length; m++) {
					pb.value = m;
					if (items[m].name == "cctf-" + ids[n]) items[m].remove();
				}
			}
		}

		// --------------------------------------------------------------------------------------------------------------
		//	Wenn Neben-der-Seite, muss der Infobereich an den Status Quo angepasst werden
		// --------------------------------------------------------------------------------------------------------------
		if (prefs.pos == 0) {
			if (!prefs.mirror_layout) {
				slot_layer.remove();
			}

			var max_w = 0;
			for (var n = 0; n < doc.spreads.length; n++) {
				var all_frames = doc.spreads[n].textFrames.everyItem().getElements();
				var min_x = doc.spreads[n].pages.firstItem().bounds[1],
					max_x = doc.spreads[n].pages.lastItem().bounds[3];
				for (var m = 0; m < all_frames.length; m++) {
					var _gb = all_frames[m].geometricBounds;
					if (_gb[1] > max_x) {
						max_w = Math.max(max_w, _gb[3] - max_x);
					} else if (_gb[3] < min_x) {
						max_w = Math.max(max_w, min_x - _gb[1]);
					}
				}
			}
			var slug_width = max_w + slot_gap;
			doc.documentPreferences.slugRightOrOutsideOffset = slug_width;
			//doc.documentPreferences.slugInsideOrLeftOffset = slug_width;
		}

		// --------------------------------------------------------------------------------------------------------------
		//	CharacterCounter sollen ganz nach vorne
		//	OTFs sollen in der Höhe angepasst werden
		// --------------------------------------------------------------------------------------------------------------
		var all_frames = doc.textFrames.everyItem().getElements();
		for ( var n = 0; n < all_frames.length; n++ ) {
			if ( all_frames[n].name.substr(0,4) == "cctf") {
				all_frames[n].bringToFront();
			}
			if ( all_frames[n].name.substr(0,3) == "otf") {
				all_frames[n].fit( FitOptions.FRAME_TO_CONTENT)
				if ( all_frames[n].overflows ) {
					all_frames[n].geometricBounds = [
						all_frames[n].geometricBounds[0],
						all_frames[n].geometricBounds[1],
						doc.pages[0].bounds[2],
						all_frames[n].geometricBounds[3]
					]
					all_frames[n].fit( FitOptions.FRAME_TO_CONTENT)
				}
			}
		}



		of_layer.locked = true;
		wpb.close();

















		// -----------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------
		// -----------------------------------------------------------------------------------------------------

		function make_itf(tf, sid) {
			var itf = doc.rectangles.itemByName("itf-" + sid);
			if (!itf.isValid) {
				if (tf.constructor.name == "Cell") {
					// var box = get_cell_coordinates(tf);
					// if ( ! box ) return;
					// var pg = box.pg;
					// var gb = box.gb;
					// itf = box.pg.rectangles.add({ geometricBounds: box.gb, itemLayer: of_layer })
					var box = cellBox( tf, "Cyan" );
					if ( ! box ) return;
					itf = box.box;
					itf.itemLayer = of_layer;
					var pg = itf.parentPage;
					var gb = itf.geometricBounds;
				} else {
					var pg = tf.parentPage;
					var gb = tf.geometricBounds;
					itf = pg.rectangles.add({ geometricBounds: gb, itemLayer: of_layer });
				}
				itf.name = "itf-" + sid;
			} else {
				if (tf.constructor.name == "Cell") {
					var box = cellBox( tf, "Cyan" );
					if ( ! box ) return;
					var pg = box.box.parentPage;
					var gb = box.box.geometricBounds;
					box.box.remove();
					// var box = get_cell_coordinates(tf);
					// if ( ! box ) return;
					// var pg = box.pg;
					// var gb = box.gb;
				} else {
					var pg = tf.parentPage;
					var gb = tf.geometricBounds;
				}
				itf.move(pg);
				itf.geometricBounds = gb;
			}
			itf.contentType = ContentType.UNASSIGNED;
			itf.fillColor = "None";
			itf.strokeColor = swatch;
			itf.strokeWeight = 2;
		}
		function make_cctf(tf, sid) {
			if (dev) $.writeln( "Making CCTF\n" + sid + ": " + tf.contents.substr(0,64));
			var cctf = doc.textFrames.itemByName("cctf-" + sid);
			if (cctf.isValid) cctf.remove();
			if (tf.constructor.name == "Cell") {
				var box = cellBox( tf, "Cyan" );
				if ( ! box ) return;
				var pg = box.box.parentPage;
				var gb = box.box.geometricBounds;
				box.box.remove();
				// var box = get_cell_coordinates(tf);
				// if ( ! box ) return;
				// var pg = box.pg;
				// var gb = box.gb;
				var visible_content = tf.contents;
				var all_content = tf.characters.everyItem().contents.join("");
				var cc = all_content.length - visible_content.length;
	
			} else {
				var pg = tf.parentPage;
				var gb = tf.visibleBounds;
				var cc = tf.parentStory.insertionPoints.lastItem().index - tf.insertionPoints.lastItem().index;
			}
			if (pg) {
				var cctf = pg.textFrames.add();
				cctf.name = "cctf-" + sid;
				cctf.itemLayer = of_layer;
				cctf.fillColor = swatch;
				cctf.fillTint = 40
				cctf.strokeColor = swatch;
				cctf.strokeTint = 80;
				cctf.textFramePreferences.insetSpacing = 2;
				cctf.visibleBounds = [gb[0] - 10, gb[3] - 20, gb[0], gb[3]];
				cctf.contents = n_format(cc);
				cctf.paragraphs[0].applyParagraphStyle(doc.paragraphStyles[0], true);
				cctf.textFramePreferences.autoSizingReferencePoint = AutoSizingReferenceEnum.BOTTOM_RIGHT_POINT;
				cctf.textFramePreferences.autoSizingType = AutoSizingTypeEnum.HEIGHT_AND_WIDTH;
				return cctf;
			}
			return null;
		}
	
		function make_otf(tf, sid) {
			app.select( tf );
			if (tf.constructor.name == "Cell") {
				var box = cellBox( tf, "Cyan" );
				if ( ! box ) return;
				var pg = box.box.parentPage;
				var gb = box.box.geometricBounds;
				box.box.remove();
				// var box = get_cell_coordinates(tf);
				// if ( ! box ) return;
				// var gb = box.gb;
				// var pg = box.pg;
			} else {
				var gb = tf.geometricBounds;
				var pg = tf.parentPage;
			}
			// Überfluss auf der Montagefläche machen wir nicht
			if (pg) {
				if (!prefs.mirror_layout) {

				}
				// --------------------------------------------------------------------------------------------------------------
				//	Neuen Rahmen positionieren
				// --------------------------------------------------------------------------------------------------------------
				var bds = pg.bounds;
				otf = doc.textFrames.itemByName("otf-" + sid);
				if (!otf.isValid) {
					var otf = create_tf_at_proper_position(pg, gb, sid);
					if (!sk_special_edition && prefs.mirror_layout) {
						otf.textFramePreferences.minimumWidthForAutoSizing = (otf.geometricBounds[3] - otf.geometricBounds[1]);
						otf.textFramePreferences.useMinimumWidthForAutoSizing = true;
						if (pg.side == PageSideOptions.LEFT_HAND) {
							otf.textFramePreferences.autoSizingReferencePoint = AutoSizingReferenceEnum.TOP_RIGHT_POINT;
						} else {
							otf.textFramePreferences.autoSizingReferencePoint = AutoSizingReferenceEnum.TOP_LEFT_POINT;
						}
						otf.textFramePreferences.autoSizingType = AutoSizingTypeEnum.WIDTH_ONLY;
					}
				}

				// --------------------------------------------------------------------------------------------------------------
				//	Füllen und Säubern
				// --------------------------------------------------------------------------------------------------------------
				if (tf.constructor.name == "Cell") {
					var visible_content = tf.contents,
						all_content = tf.characters.everyItem().contents.join(""),
						of_content = all_content.substr(visible_content.length);
					otf.contents = of_content;

				} else {
					otf.parentStory.contents = "";
					var _von = tf.insertionPoints.lastItem().index,
						_bis = tf.parentStory.characters.lastItem().index
					var range = tf.parentStory.characters.itemByRange(_von, _bis)
					if (range.isValid) {
						range.duplicate(LocationOptions.AT_END, otf);
					}
				}

				clean_text(otf);

				// --------------------------------------------------------------------------------------------------------------
				//	Indikatorlinie
				// --------------------------------------------------------------------------------------------------------------
				if (prefs.show_thread) {
					var line = doc.graphicLines.itemByName("oln-" + sid);
					if (!line.isValid) {
						line = pg.graphicLines.add({
							strokeColor: swatch,
							strokeTint: 50,
							strokeWeight: 2,
							itemLayer: of_layer,
							name: "oln-" + sid
						})
					}
					if (pg.side == PageSideOptions.LEFT_HAND && prefs.pos == 0) {
						line.paths[0].entirePath = [
							[gb[1], gb[2]],
							[otf.geometricBounds[3], otf.geometricBounds[0]],
						]
					} else {
						line.paths[0].entirePath = [
							[gb[3], gb[2]],
							[otf.geometricBounds[1], otf.geometricBounds[0]],
						]
					}
				}

				// --------------------------------------------------------------------------------------------------------------
				//	Wenn otf breiter als die Seite, dann keine Autobreite mehr
				// --------------------------------------------------------------------------------------------------------------
				if (!sk_special_edition && prefs.mirror_layout) {
					var pw = bds[3] - bds[1]
					if ((otf.geometricBounds[3] - otf.geometricBounds[1]) > pw) {
						otf.textFramePreferences.autoSizingType = AutoSizingTypeEnum.OFF;
						if (pg.side == PageSideOptions.LEFT_HAND) {
							otf.geometricBounds = [
								otf.geometricBounds[0],
								otf.geometricBounds[3] - pw,
								otf.geometricBounds[2],
								otf.geometricBounds[3]
							]
						} else {
							otf.geometricBounds = [
								otf.geometricBounds[0],
								otf.geometricBounds[1],
								otf.geometricBounds[2],
								otf.geometricBounds[1] + pw
							]
						}
					}
				} else {
					var aux1 = otf.geometricBounds;
					var aux2 = otf.lines.lastItem().baseline;
					otf.geometricBounds = [
						aux1[0],
						aux1[1],
						aux2 + 4,
						aux1[3],
					]
				}


				return otf;
			}	// is on page
			return null;
		}		// make_otf

		// --------------------------------------------------------------------------------------------------------------
		//	CS will, dass das Layout nicht gespiegelt wird. Dadurch wird die Positionierung komplex
		// --------------------------------------------------------------------------------------------------------------
		function create_tf_at_proper_position(pg, gb, sid) {

			var otf = pg.textFrames.add({ itemLayer: of_layer, geometricBounds: gb });
			otf.textFramePreferences.insetSpacing = slot_gap + "mm";
			otf.name = "otf-" + sid;
			otf.insertLabel("gs_overflow_of_frame", "true");
			otf.fillColor = swatch;
			otf.fillTint = 50;
			// otf.fillTransparencySettings.blendingSettings.opacity = 60;

			var dir = (pg.side == PageSideOptions.LEFT_HAND) ? -1 : 1;
			// -------- Neben Rahmen --------
			if (prefs.pos == 1) {
				otf.geometricBounds = [
					gb[0],
					gb[3] + slot_gap,
					gb[2],
					gb[3] + (gb[3] - gb[1]) + slot_gap
				]
			}
			// -------- Unter Rahmen --------
			else if (prefs.pos == 2) {
				otf.geometricBounds = [
					gb[2] + anschnitt_h,
					gb[1],
					gb[2] + anschnitt_h + (gb[2] - gb[0]),
					gb[3]
				]
			}
			// -------- Neben Seite Layout spiegelnd --------
			else if (prefs.pos == 0 && prefs.mirror_layout) {
				var _pw = pg.bounds[3] - pg.bounds[1];
				otf.geometricBounds = [
					gb[0],
					gb[1] + dir * (slot_gap + _pw),
					gb[2],
					gb[3] + dir * (slot_gap + _pw)
				]
			}
			// -------- Neben Seite gestapelt --------
			else if (prefs.pos == 0 && !prefs.mirror_layout) {
				var aux = pg.name;
				var aux1 = pg.appliedMaster;
				var np = pg.documentOffset;
				for (var n = 0; n < empty_otfs[np].length; n++) {
					if (empty_otfs[np][n].contents == "") {
						otf.geometricBounds = empty_otfs[np][n].geometricBounds;
						empty_otfs[np][n].contents = "filled";
						break;
					}
				}

			}			// neben Seite gestapelt

			return otf;
		}


		function get_cell_coordinates(cell) {

			try {
				cell.insertionPoints[0].contents = ".\n";
				cell.characters.itemByRange(0, 1).pointSize = 2;
				cell.characters.itemByRange(0, 1).leading = 2;

				var w = cell.columns[0].width;
				var h = cell.rows[0].height;
				var dx = cell.leftInset;
				var _j = cell.insertionPoints[0].justification
				if (_j.toString().search(/CENTER/) != -1) dx = dx + (w - cell.leftInset - cell.rightInset) / 2;
				if (_j.toString().search(/RIGHT/) != -1) dx = dx + (w - cell.leftInset - cell.rightInset);
				var dy = cell.topInset;
				if (cell.verticalJustification == VerticalJustification.CENTER_ALIGN) dy = dy + (h - cell.topInset - cell.bottomInset) / 2;
				if (cell.verticalJustification == VerticalJustification.BOTTOM_ALIGN) dy = dy + (h - cell.topInset - cell.bottomInset);

				// app.select( cell );
				var c = cell.characters[0];
				var o = c.createOutlines(false)[0];
				var pg = o.parentPage
				cell.characters.itemByRange(0, 1).remove();
				var gb = o.geometricBounds;
				o.remove();
				var _gb = [
					gb[0] - dy,
					gb[1] - dx,
					gb[0] + h - dy,
					gb[1] + w - dx,
				];
				return { pg: pg, gb: _gb };
			} catch(e) {
				app.select( cell );
				return null;
			}
		}
	}			// show overflow


	function clean_text(tf) {
		var s = tf.parentStory;
		var scs = [
			{ von: "^M", zu: "<" + __('ColumnBreak') + ">\n" },
			{ von: "^R", zu: "<" + __('FrameBreak') + ">\n" },
			{ von: "^P", zu: "<" + __('PageBreak') + ">\n" },
			{ von: "^L", zu: "<" + __('OddPageBreak') + ">\n" },
			{ von: "^E", zu: "<" + __('EvenPageBreak') + ">\n" },
		]
		app.findTextPreferences = NothingEnum.nothing;
		app.changeTextPreferences = NothingEnum.nothing;
		for (var n = 0; n < scs.length; n++) {
			app.findTextPreferences.findWhat = scs[n].von;
			app.changeTextPreferences.changeTo = scs[n].zu;
			s.changeText();
		}
		try {
			s.paragraphs.everyItem().alignToBaseline = false;
			s.paragraphs.everyItem().appliedFont = "Minion Pro";
			s.paragraphs.everyItem().pointSize = 10;
			s.paragraphs.everyItem().leading = 12; 
			s.paragraphs.everyItem().justification = Justification.LEFT_ALIGN;
			s.paragraphs.everyItem().fillColor = "Black";
			s.paragraphs.everyItem().strokeColor = "None";
			s.paragraphs.everyItem().fontStyle = "Italic";
		} catch (e) { }
		for (var n = s.tables.length - 1; n >= 0; n--) {
			var t = s.tables[n];
			var ix = t.storyOffset.index;
			t.remove();
			s.insertionPoints[ix].contents = "<" + __('Table') + ">\n";
		}
		for (var n = s.pageItems.length - 1; n >= 0; n--) {
			var t = s.pageItems[n];
			var ix = t.parent.index;
			t.remove();
			s.insertionPoints[ix].contents = "<" + __('Anchored Object') + ">\n";
		}
		app.findGrepPreferences = NothingEnum.NOTHING;
		app.changeGrepPreferences = NothingEnum.NOTHING;
		app.findGrepPreferences.findWhat = "<.*?>";
		//app.changeGrepPreferences.appliedFont = "Courier";
		app.changeGrepPreferences.noBreak = true;
		s.changeGrep();
	}
	function n_format(n) {
		n = Math.round(n);
		if (n > 999999) {
			var rs = Math.floor(n / 1000000) + __('dec_sep');
			n = n - Math.floor(n / 1000000);
			rs += ("000" + (Math.floor(n / 1000) + __('dec_sep') + (n % 1000))).substr(-3);
			return rs;
		} else if (n > 999) {
			return Math.floor(n / 1000) + __('dec_sep') + ( "000" + (n % 1000) ).substr(-3);
		} else {
			return n.toString();
		}
	}



	function clear_overflow() {
		// --------------------------------------------------------------------------------------------------------------
		//	Die Fallback Werte wieder einrichten
		// --------------------------------------------------------------------------------------------------------------
		var fallback_values = doc.extractLabel("gs_overflow_fallback_values");
		if (fallback_values) {
			fallback_values = JSON.parse(fallback_values);

			try { doc.viewPreferences.rulerOrigin = RulerOrigin[fallback_values.ruler_origin]; } catch (e) { }

			try { doc.documentPreferences.documentSlugUniformSize = fallback_values.slug.uniform; } catch (e) { }
			try { doc.documentPreferences.slugTopOffset = fallback_values.slug.top; } catch (e) { }
			try { doc.documentPreferences.slugInsideOrLeftOffset = fallback_values.slug.left; } catch (e) { }
			try { doc.documentPreferences.slugBottomOffset = fallback_values.slug.bottom; } catch (e) { }
			try { doc.documentPreferences.slugRightOrOutsideOffset = fallback_values.slug.right; } catch (e) { }

			try { doc.layoutWindows[0].screenMode = ScreenModeOptions[fallback_values.screen_mode] } catch (e) { }

			try { doc.viewPreferences.showFrameEdges = fallback_values.frame_edges; } catch (e) { }
			try { doc.pasteboardPreferences.pasteboardMargins = fallback_values.pasteboard_margins } catch (e) { }

			doc.insertLabel("gs_overflow_fallback_values", "");
		}

		var swatchgroup = doc.colorGroups.item(__('Overflow'));
		if (swatchgroup.isValid) swatchgroup.remove();

		var of_layer = doc.layers.item(__('OF-Frames'));
		if (of_layer.isValid) of_layer.remove();

		var tfs = doc.textFrames.everyItem().getElements();
		for (var n = tfs.length - 1; n >= 0; n--) {
			if (tfs[n].extractLabel("gs_overflow_of_frame") == "true") tfs[n].remove();
		}
	}

	function openWebsite(url) {
		url = url.split(" ");
		url = url.join("+");
		url = encodeURI( url );
		if (File.fs == "Macintosh") {
			var tempFile = File("~/Desktop/tempurl.webloc");
			tempFile.open("w");
			tempFile.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\
			<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\
			<plist version=\"1.0\">\
				<dict>\
					<key>URL</key>\
					<string>"+url+"</string>\
				</dict>\
			</plist>");
			tempFile.close();
			tempFile.execute();
			for (var aux = 0; aux < 100; aux++) {
				$.sleep(10);
			}
			tempFile.remove();
		} else {
			var tempFile = File("~/Desktop/cuppascript.url");
			tempFile.open("w");
			tempFile.write("[InternetShortcut]\
	URL="+url);
			tempFile.close();
			tempFile.execute();
			for (var aux = 0; aux < 100; aux++) {
				$.sleep(10);
			}
			tempFile.remove();
		}
	}
	









	function init() {
		json_init();
		
		cellBox = function(/*Cell|PageItem*/target,/*?str*/fillColor,/*?Document*/doc, bkStrokeMu, wrk, K, cell, pp, t, i, q, r)
		//----------------------------------
		// Create a rectangle that exactly (?) matches the `target` object
		// (single or plural specifier) w.r.t to transform states and
		// stroke weight. Return a { box, left, top, right, bottom }
		// structure, `box` being the created Rectangle. The coordi-
		// nates (in pt) are all given in the INNER space.
		// [REM] Master items not supported!
		// [ADD220803] `target` can be the cell's pageitem as well; the
		// client code can provide `doc` if the host document is already
		// known.
		// [ADD220801] Added `innerWidth`, `innerHeight` props.
		
		// => { box: new Rectangle, ... }  [OK]  |  false [KO]
		{
			// Boring enums.
			// ---
			const MX = callee.MX || (callee.MX =
			{
				muPT: +MeasurementUnits.POINTS,
				ctGC: +CellTypeEnum.GRAPHIC_TYPE_CELL,
				ctTX: +CellTypeEnum.TEXT_TYPE_CELL,
				loBEG: +LocationOptions.AT_BEGINNING,
				// ---
				apTL: +AnchorPoint.TOP_LEFT_ANCHOR,
				apBR: +AnchorPoint.BOTTOM_RIGHT_ANCHOR,
				apCC: +AnchorPoint.CENTER_ANCHOR,
				// ---
				bbVIS: +BoundingBoxLimits.OUTER_STROKE_BOUNDS,
				// ---
				csPB: +CoordinateSpaces.PASTEBOARD_COORDINATES,
				csSP: +CoordinateSpaces.SPREAD_COORDINATES,
				csPR: +CoordinateSpaces.PARENT_COORDINATES,
				csIN: +CoordinateSpaces.INNER_COORDINATES,
				// ---
				mcSHR: [+(t = MatrixContent).scaleValues, +t.shearValue, +t.rotationValue],
			});
		
			// Checkpoint and settings.
			// ---
			if (!(target || 0).isValid) {
				return false;
			}
			if ('Document' != (doc || 0).constructor.name) {
				t = 'function' == typeof (target.toSpecifier) && target.toSpecifier();
				if ('string' != typeof t) return false;
				t = t.split('//')[0];
				try { doc = resolve(0 === t.indexOf('(') ? t.slice(1) : t) }
				catch (_) { doc = 0 }
				if (!doc.isValid) return false;
			}
			if ('Cell' != target.constructor.name && 'Cell' != (target = target.parent || 0).constructor.name) {
				return false;
			}
			('string' == typeof fillColor && (doc.colors.itemByName(fillColor).isValid || doc.swatches.itemByName(fillColor).isValid))
				|| (fillColor = 'Black');
			callee.BOX_PROPS =
			{
				strokeColor: 'None',
				fillColor: fillColor,
				// Add safety attributes: corner options, etc
			};
		
			// Temporarily force stroke weights in PT.
			// ---
			MX.muPT == (bkStrokeMu = +doc.viewPreferences.strokeMeasurementUnits)
				? (bkStrokeMu = false)
				: (doc.viewPreferences.strokeMeasurementUnits = MX.muPT);
		
			// Supports multiple cells.
			// ---
			for (wrk = {}, K = target.cells, i = K.length; i--;) {
				pp = (cell = K[i]).properties;
				if( MX.ctGC == +pp.cellType ) {
					var aux3 = callee.GRAC;
				} else {
					var aux4 = callee.TEXC;
				}
				t = callee[MX.ctGC == +pp.cellType ? 'GRAC' : 'TEXC'];
				t.call(callee, wrk, doc, cell, pp, MX);
			}
		
			// Apply final reframe and format result.
			// ---
			r = [];
			for (t in wrk) {
				if (!wrk.hasOwnProperty(t)) continue;
				q = wrk[t];
				q.box.reframe(MX.csIN, [[q.L, q.T], [q.R, q.B]]);
				r[r.length] =
				{
					box: q.box,
					top: q.T,
					left: q.L,
					bottom: q.B,
					right: q.R,
					innerWidth: q.R - q.L,
					innerHeight: q.B - q.T,
				}
			}
		
			// Restore stroke unit if necessary.
			// ---
			bkStrokeMu && (doc.viewPreferences.strokeMeasurementUnits = bkStrokeMu);
		
			return 0 < (t = r.length) && (1 < t ? r : r[0]);
		};
		
		cellBox.TEXC = function (/*Work&*/wrk,/*Document*/doc,/*Cell&*/cell,/*CellProp*/pp,/*Enums*/MX, reGrow, sto, tf, bx)
		//----------------------------------
		// (Process-Text-Cell.) `cell` is a regular Cell.
		// this :: cellBox (fct)
		// => {} [OK]  |  false [KO]
		{
			(reGrow = pp.autoGrow) && (cell.autoGrow = false);
		
			sto = (tf = doc.textFrames.add()).parentStory;               // Dummy frame/story.
			cell.texts[0].move(MX.loBEG, sto);                       // Assert: Cell is now empty.
			cell.convertCellType(MX.ctGC);                           // Assert: Cell.pageItems[0] is a Rectangle.
		
			bx = this.GRAC(wrk, doc, cell, pp, MX);
		
			cell.convertCellType(MX.ctTX);                           // Restore Text cell.
			sto.move(MX.loBEG, cell.texts[0].insertionPoints[0]);     // Restore contents.
			tf.remove();                                             // Remove dummy fame.
		
			reGrow && (cell.autoGrow = true);                          // Restore autoGrow if necessary.
			return bx;
		};
		
		cellBox.GRAC = function (/*Work&*/wrk,/*Document*/doc,/*Cell*/cell,/*CellProp*/pp,/*Enums*/MX, gco, spd, bx, q, k, t, m, lt, rb)
		//----------------------------------
		// (Process-Graphic-Cell.) `cell` is a GC.
		// this :: cellBox (fct)
		// => {} [OK]  |  false [KO]
		{
			const myTL = callee.LOC_TL || (callee.LOC_TL = [MX.apTL, MX.bbVIS, MX.csPR]);
			const myBR = callee.LOC_BR || (callee.LOC_BR = [MX.apBR, MX.bbVIS, MX.csPR]);
		
			// 1. Determine the destination SPREAD.
			// ---
			gco = cell.pageItems[0];                                      // Could be any kind of PageItem (incl. Button, MSO etc.)
			if (!gco.properties.visibleBounds) return false;             // Make sure `gco` is not a 'ghost'.
			t = gco.resolve(MX.apCC, MX.csPB)[0][1];                       // Y-coord of the center point *in PASTEBOARD space*.
			spd = this.Y2SP(t, doc, MX);                                    // Host spread.
		
			// 2. Get/create the box (SPREAD item).
			// ---
			if (wrk.hasOwnProperty(k = '_' + spd.id)) {
				q = wrk[k];
				bx = q.box;                                               // Recover existing box.
				m = q.tsf;                                                // Recover PB->boxInner matrix.
			}
			else {
				bx = this.IBOX(spd, gco, MX);                               // New box.
				m = bx.transformValuesOf(MX.csPB)[0].invertMatrix();      // PB->boxInner
				q = wrk[k] = { box: bx, tsf: m, L: 1 / 0, T: 1 / 0, R: -1 / 0, B: -1 / 0 }; // Save.
			}
		
			// 3. The whole cellBox trick is here: get the opposite
			// corners of the *VISIBLE IN-PARENT* box of `gco`.
			// ---
			lt = m.changeCoordinates(gco.resolve(myTL, MX.csPB)[0]);       // Translate the resolved (L,T) from PB to boxInner.
			(t = pp.leftEdgeStrokeWeight || 0) && (lt[0] -= t / 2);             // Left edge shift.
			(t = pp.topEdgeStrokeWeight || 0) && (lt[1] -= t / 2);             // Top edge shift.
			// ---
			rb = m.changeCoordinates(gco.resolve(myBR, MX.csPB)[0]);       // Translate the resolved (R,B) from PB to boxInner
			(t = pp.rightEdgeStrokeWeight || 0) && (rb[0] += t / 2);             // Right edge shift.
			(t = pp.bottomEdgeStrokeWeight || 0) && (rb[1] += t / 2);             // Rottom edge shift.
		
			// 4. Basically, all we have to do is reframing the box
			// in its inner space along [lt,rb]. But since we may
			// address multiple cells, just update the metrics.
			// ---
			(t = lt[0]) < q.L && (q.L = t);
			(t = lt[1]) < q.T && (q.T = t);
			(t = rb[0]) > q.R && (q.R = t);
			(t = rb[1]) > q.B && (q.B = t);
		
			return bx;
		};
		
		cellBox.IBOX = function (/*Spread*/spd,/*PageItem*/gco,/*Enums*/MX, r, t)
		//----------------------------------
		// (Initialize-Box.) Create a new box in appropriate transform state.
		// this :: cellBox (fct)
		// => Rectangle.
		{
			const TVO = 'transformValuesOf';
			const INV = 'invertMatrix';
		
			// 1. Create a fresh rectangle in `spd`.
			// ---
			r = spd.rectangles.add(gco.itemLayer);
			r.properties = this.BOX_PROPS;
		
			// 2. Adjust the transform state (diregarding translation)
			// so that: recInner->Spread  fits  gcoParent->Spread.
			// [REM] Since gco.transformValuesOf(<Spread>) is unsafe,
			// rely on spd->PB matrix:
			// Parent->Spread = Parent->Inner × Inner->PB × PB->Spread
			// ---
			t = gco[TVO](MX.csPR)[0][INV]()                               //   Parent->Inner
				.catenateMatrix(gco[TVO](MX.csPB)[0])                   // × Inner->PB
				.catenateMatrix(spd[TVO](MX.csPB)[0][INV]());           // × PB->Spread
			r.transform(MX.csSP, MX.apCC, t, MX.mcSHR);                   // Replace the existing S•H•R components.
		
			return r;
		};
		
		cellBox.Y2SP = function (/*num*/Y,/*Document*/doc,/*Enums*/MX, K, a, t, k, i, z, b)
		//----------------------------------
		// Get the Spread that contains the absolute Y coordinate (in Pasteboard space.)
		// [REM] Master spreads not supported!!
		// => Spread.
		{
			// Spread y-positions. (Cached.)
			// ---
			K = doc.spreads;
			a = (t = callee.Q || (callee.Q = {})).hasOwnProperty(k = doc.toSpecifier()) && t[k];
			if (!a) {
				a = K.everyItem().resolve([MX.apTL, MX.bbVIS, MX.csPB], MX.csPB)[0];
				for (i = z = a.length; i--; a[i] = i ? a[i][1] : -1 / 0);
				a[z] = 1 / 0;
				t[k] = a;
			}
			else {
				z = -1 + a.length;
			}
		
			// Binary search. Looks for the unique `i` s.t.
			// `a[i] <= Y < a[i+1]` (i is then the spread index.)
			// ---
			for
				(
				t = [0, z];
				Y < a[i = (t[b = 0] + t[1]) >> 1] || Y >= a[(b = 1) + i];
				t[1 - b] = b + i
			);
		
			return K[i];
		};		
	}

	function __(id) {
		if (typeof localization_strings !== "object") {
			var raw = read_loc_file();
			localization_strings = JSON.parse(raw);
		}
		if (localization_strings.hasOwnProperty(id)) {
			return localize(localization_strings[id]);
		} else {
			return id
		}
	}
	function read_loc_file() {
		var path = find_loc_file();
		if (!path) {
			var _def = {
				"Pink": {"de": "Pink", "en": "Pink"},
				"Blue": {"de": "Blau", "en": "Blue"},
				"Orange": {"de": "Orange", "en": "Reddish"},
				"Green": {"de": "Grün", "en": "Green"},
				"Sand": {"de": "Beige", "en": "Sand"},
				"Petrol": {"de": "Petrol", "en": "Petrol"},
				"Purple": {"de": "Lila", "en": "Purple"},
				"Gras": {"de": "Gras", "en": "Gras"},
			
				"Overflow": {"de": "Übersatz", "en": "Overflow"},
			
				"Show-Overflow-Head-en": {"de": "Show-Overflow-Head-de", "en": "Show-Overflow-Head-en"},
			
				"win_title": {"de": "Übersatz zeigen", "en": "Show Overflows"},
				"Options": {"de": "Optionen", "en": "Options"},
				"Colors": {"de": "Farben", "en": "Colors"},
				"Position": {"de": "Position", "en": "Position"},
			
				"Mark Textframes": {"de": "Rahmen markieren", "en": "Mark Textframes"},
				"Show Char-Count": {"de": "Zeichenzahl zeigen", "en": "Show Char-Count"},
				"Show Threadlines": {"de": "Verbindungslinien zeigen", "en": "Show Threadlines"},
				"Inspect Tablecells": {"de": "Tabellenzellen berücksichtigen", "en": "Inspect Tablecells"},
				"Mirror Layout": {"de": "Übersatzrahmen spiegeln Seitenlayout", "en": "Mirror Layout"},
			
				"Right of Page": {"de": "Neben der Seite", "en": "Beside Page"},
				"Right of Frame": {"de": "Neben dem Rahmen", "en": "Beside Frame"},
				"Below Page": {"de": "Unter der Seite", "en": "Below Page"},
				"Below Frame": {"de": "Unter dem Rahmen", "en": "Below Frame"},
				
				"Go": {"de": "Anlegen", "en": "Go"},
				"Update": {"de": "Aktualisieren", "en": "Update"},
				"Remove": {"de": "Entfernen" , "en": "Remove"},
				"Cancel": {"de": "Abbrechen" , "en": "Cancel"},
				"All On": {"de": "Alle an", "en": "All On"},
				"All Off": {"de": "Alle aus", "en": "All Off"},
			
				"OF-Frames": { "de": "Übersatz", "en": "Overflow"},
			
				"dec_sep": {"de": ".", "en": ","},
			
			
				"Table": {"de": "Tabelle", "en": "Table"},
				"Anchored Object": {"de": "Verankertes Objekt", "en": "Anchored Object"},
				"ColumnBreak": {"de": "<spaltenumbruch>", "en": "<ColumnBreak>"},
				"FrameBreak": {"de": "<rahmenumbruch>", "en": "<FrameBreak>"},
				"PageBreak": {"de": "<seitenumbruch>", "en": "<PageBreak>"},
				"OddPageBreak": {"de": "<ungeradeseiteumbruch>", "en": "<OddPageBreak>"},
				"EvenPageBreak": {"de": "<geradeseiteumbruch>", "en": "<EvenPageBreak>"}
			};
			return JSON.stringify(_def);
		} else {
			var f = new File(path);
			f.encoding = "UTF-8";
			f.open("r");
			var l = f.read();
			f.close();
			return l;
		}
	}
	function find_loc_file() {
		try {
			var script_path = app.activeScript.fullName;
		} catch (e) {
			var script_path = e.fileName
		}
		var scriptfolder_path = script_path.split("/");
		var script_name = scriptfolder_path.pop().replace(/\.jsx$/i, "");
		scriptfolder_path = scriptfolder_path.join("/");
		var loc_path = scriptfolder_path + "/assets/" + script_name + "-loc.json";
		// $.bp();
		if (File(loc_path).exists) {
			return loc_path
		} else {
			return null;
		}
	}
}









function read_file(file_path) {
	// Es soll möglich sein, ein Fileobject zu übergeben
	if (file_path.constructor.name == "File") {
		if (file_path.exists) {
			file_path = file_path.fullName;
		} else {
			file_path = file_path.name;
		}
	}
	// Wir haben absoluten Pfad
	if (file_path.charAt(0) == "/" || file_path.charAt(0) == "~") {
		var f = new File(file_path);
		if (!f.exists) {
			return null;
		}
		f.encoding = "UTF-8";
		f.open("r");
		var rs = f.read();
		f.close();
		return rs;
	}
	// Wir haben relativen Pfad
	file_path = file_path.replace(/^\.\//, "");
	var doc_path, desktop_path, script_path, user_path;
	if (app.documents.length && app.activeDocument.saved) doc_path = File(app.activeDocument.fullName).parent.fullName;
	desktop_path = Folder.desktop.fullName;
	script_path = File(get_script_path()).parent.fullName;
	user_path = Folder.userData.fullName + "/cuppascript";

	var read_this_path = "";
	if (doc_path && File(doc_path + "/" + file_path).exists) {
		read_this_path = doc_path + "/" + file_path;
	} else if (File(desktop_path + "/" + file_path).exists) {
		read_this_path = desktop_path + "/" + file_path;
	} else if (File(script_path + "/" + file_path).exists) {
		read_this_path = script_path + "/" + file_path;
	} else if (File(user_path + "/" + file_path).exists) {
		read_this_path = user_path + "/" + file_path;
	}
	if (read_this_path) {
		var f = new File(read_this_path);
		f.encoding = "UTF-8";
		f.open("r");
		var rs = f.read();
		f.close();
		return rs;
	} else {
		return null;
	}
}

function get_script_path(get_folder) {
	var scriptPath, scriptFolderPath;
	try {
		scriptPath = app.activeScript.fullName;
		scriptFolderPath = app.activeScript.parent.fullName;
		return get_folder ? scriptFolderPath : scriptPath;
	}
	catch (e) {
		/* We're running from the ESTK*/
		if (get_folder) {
			scriptPath = e.fileName.split("/");
			scriptPath.pop();
			return unescape(scriptPath.join("/"));
		} else {
			scriptPath = e.fileName
			return unescape(scriptPath);
		}
	}
	return scriptPath;
}













function json_init() {

	if (typeof JSON !== "object") {
		JSON = {};
	}

	(function () {
		"use strict";

		var rx_one = /^[\],:{}\s]*$/;
		var rx_two = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
		var rx_three = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
		var rx_four = /(?:^|:|,)(?:\s*\[)+/g;
		var rx_escapable = /[\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
		var rx_dangerous = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;

		function f(n) {
			// Format integers to have at least two digits.
			return (n < 10)
				? "0" + n
				: n;
		}

		function this_value() {
			return this.valueOf();
		}

		if (typeof Date.prototype.toJSON !== "function") {

			Date.prototype.toJSON = function () {

				return isFinite(this.valueOf())
					? (
						this.getUTCFullYear()
						+ "-"
						+ f(this.getUTCMonth() + 1)
						+ "-"
						+ f(this.getUTCDate())
						+ "T"
						+ f(this.getUTCHours())
						+ ":"
						+ f(this.getUTCMinutes())
						+ ":"
						+ f(this.getUTCSeconds())
						+ "Z"
					)
					: null;
			};

			Boolean.prototype.toJSON = this_value;
			Number.prototype.toJSON = this_value;
			String.prototype.toJSON = this_value;
		}

		var gap;
		var indent;
		var meta;
		var rep;


		function quote(string) {

			// If the string contains no control characters, no quote characters, and no
			// backslash characters, then we can safely slap some quotes around it.
			// Otherwise we must also replace the offending characters with safe escape
			// sequences.

			rx_escapable.lastIndex = 0;
			return rx_escapable.test(string)
				? "\"" + string.replace(rx_escapable, function (a) {
					var c = meta[a];
					return typeof c === "string"
						? c
						: "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
				}) + "\""
				: "\"" + string + "\"";
		}


		function str(key, holder) {

			// Produce a string from holder[key].

			var i;          // The loop counter.
			var k;          // The member key.
			var v;          // The member value.
			var length;
			var mind = gap;
			var partial;
			var value = holder[key];

			// If the value has a toJSON method, call it to obtain a replacement value.

			if (
				value
				&& typeof value === "object"
				&& typeof value.toJSON === "function"
			) {
				value = value.toJSON(key);
			}

			// If we were called with a replacer function, then call the replacer to
			// obtain a replacement value.

			if (typeof rep === "function") {
				value = rep.call(holder, key, value);
			}

			// What happens next depends on the value's type.

			switch (typeof value) {
				case "string":
					return quote(value);

				case "number":

					// JSON numbers must be finite. Encode non-finite numbers as null.

					return (isFinite(value))
						? String(value)
						: "null";

				case "boolean":
				case "null":

					// If the value is a boolean or null, convert it to a string. Note:
					// typeof null does not produce "null". The case is included here in
					// the remote chance that this gets fixed someday.

					return String(value);

				// If the type is "object", we might be dealing with an object or an array or
				// null.

				case "object":

					// Due to a specification blunder in ECMAScript, typeof null is "object",
					// so watch out for that case.

					if (!value) {
						return "null";
					}

					// Make an array to hold the partial results of stringifying this object value.

					gap += indent;
					partial = [];

					// Is the value an array?

					if (Object.prototype.toString.apply(value) === "[object Array]") {

						// The value is an array. Stringify every element. Use null as a placeholder
						// for non-JSON values.

						length = value.length;
						for (i = 0; i < length; i += 1) {
							partial[i] = str(i, value) || "null";
						}

						// Join all of the elements together, separated with commas, and wrap them in
						// brackets.

						v = partial.length === 0
							? "[]"
							: gap
								? (
									"[\n"
									+ gap
									+ partial.join(",\n" + gap)
									+ "\n"
									+ mind
									+ "]"
								)
								: "[" + partial.join(",") + "]";
						gap = mind;
						return v;
					}

					// If the replacer is an array, use it to select the members to be stringified.

					if (rep && typeof rep === "object") {
						length = rep.length;
						for (i = 0; i < length; i += 1) {
							if (typeof rep[i] === "string") {
								k = rep[i];
								v = str(k, value);
								if (v) {
									partial.push(quote(k) + (
										(gap)
											? ": "
											: ":"
									) + v);
								}
							}
						}
					} else {

						// Otherwise, iterate through all of the keys in the object.

						for (k in value) {
							if (Object.prototype.hasOwnProperty.call(value, k)) {
								v = str(k, value);
								if (v) {
									partial.push(quote(k) + (
										(gap)
											? ": "
											: ":"
									) + v);
								}
							}
						}
					}

					// Join all of the member texts together, separated with commas,
					// and wrap them in braces.

					v = partial.length === 0
						? "{}"
						: gap
							? "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
							: "{" + partial.join(",") + "}";
					gap = mind;
					return v;
			}
		}

		// If the JSON object does not yet have a stringify method, give it one.

		if (typeof JSON.stringify !== "function") {
			meta = {    // table of character substitutions
				"\b": "\\b",
				"\t": "\\t",
				"\n": "\\n",
				"\f": "\\f",
				"\r": "\\r",
				"\"": "\\\"",
				"\\": "\\\\"
			};
			JSON.stringify = function (value, replacer, space) {

				// The stringify method takes a value and an optional replacer, and an optional
				// space parameter, and returns a JSON text. The replacer can be a function
				// that can replace values, or an array of strings that will select the keys.
				// A default replacer method can be provided. Use of the space parameter can
				// produce text that is more easily readable.

				var i;
				gap = "";
				indent = "";

				// If the space parameter is a number, make an indent string containing that
				// many spaces.

				if (typeof space === "number") {
					for (i = 0; i < space; i += 1) {
						indent += " ";
					}

					// If the space parameter is a string, it will be used as the indent string.

				} else if (typeof space === "string") {
					indent = space;
				}

				// If there is a replacer, it must be a function or an array.
				// Otherwise, throw an error.

				rep = replacer;
				if (replacer && typeof replacer !== "function" && (
					typeof replacer !== "object"
					|| typeof replacer.length !== "number"
				)) {
					throw new Error("JSON.stringify");
				}

				// Make a fake root object containing our value under the key of "".
				// Return the result of stringifying the value.

				return str("", { "": value });
			};
		}


		// If the JSON object does not yet have a parse method, give it one.

		if (typeof JSON.parse !== "function") {
			JSON.parse = function (text, reviver) {

				// The parse method takes a text and an optional reviver function, and returns
				// a JavaScript value if the text is a valid JSON text.

				var j;

				function walk(holder, key) {

					// The walk method is used to recursively walk the resulting structure so
					// that modifications can be made.

					var k;
					var v;
					var value = holder[key];
					if (value && typeof value === "object") {
						for (k in value) {
							if (Object.prototype.hasOwnProperty.call(value, k)) {
								v = walk(value, k);
								if (v !== undefined) {
									value[k] = v;
								} else {
									delete value[k];
								}
							}
						}
					}
					return reviver.call(holder, key, value);
				}


				// Parsing happens in four stages. In the first stage, we replace certain
				// Unicode characters with escape sequences. JavaScript handles many characters
				// incorrectly, either silently deleting them, or treating them as line endings.

				text = String(text);
				rx_dangerous.lastIndex = 0;
				if (rx_dangerous.test(text)) {
					text = text.replace(rx_dangerous, function (a) {
						return (
							"\\u"
							+ ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
						);
					});
				}

				// In the second stage, we run the text against regular expressions that look
				// for non-JSON patterns. We are especially concerned with "()" and "new"
				// because they can cause invocation, and "=" because it can cause mutation.
				// But just to be safe, we want to reject all unexpected forms.

				// We split the second stage into 4 regexp operations in order to work around
				// crippling inefficiencies in IE's and Safari's regexp engines. First we
				// replace the JSON backslash pairs with "@" (a non-JSON character). Second, we
				// replace all simple value tokens with "]" characters. Third, we delete all
				// open brackets that follow a colon or comma or that begin the text. Finally,
				// we look to see that the remaining characters are only whitespace or "]" or
				// "," or ":" or "{" or "}". If that is so, then the text is safe for eval.

				if (
					rx_one.test(
						text
							.replace(rx_two, "@")
							.replace(rx_three, "]")
							.replace(rx_four, "")
					)
				) {

					// In the third stage we use the eval function to compile the text into a
					// JavaScript structure. The "{" operator is subject to a syntactic ambiguity
					// in JavaScript: it can begin a block or an object literal. We wrap the text
					// in parens to eliminate the ambiguity.

					j = eval("(" + text + ")");

					// In the optional fourth stage, we recursively walk the new structure, passing
					// each name/value pair to a reviver function for possible transformation.

					return (typeof reviver === "function")
						? walk({ "": j }, "")
						: j;
				}

				// If the text is not JSON parseable, then a SyntaxError is thrown.

				throw new SyntaxError("JSON.parse");
			};
		}
	}());
}
